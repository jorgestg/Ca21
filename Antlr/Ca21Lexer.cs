//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ca21Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ExternKeyword=1, ExportKeyword=2, FuncKeyword=3, LetKeyword=4, MutKeyword=5, 
		Int32Keyword=6, BoolKeyword=7, StringKeyword=8, StructKeyword=9, TrueKeyword=10, 
		FalseKeyword=11, WhileKeyword=12, ReturnKeyword=13, String=14, Integer=15, 
		Identifier=16, Semicolon=17, Comma=18, LeftParenthesis=19, RightParenthesis=20, 
		LeftBrace=21, RightBrace=22, Dot=23, Star=24, Slash=25, Percentage=26, 
		Plus=27, Minus=28, LessThan=29, LessThanOrEqual=30, GreaterThan=31, GreaterThanOrEqual=32, 
		Equal=33, Whitespace=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", "MutKeyword", 
		"Int32Keyword", "BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "String", "Integer", 
		"Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Star", "Slash", "Percentage", "Plus", 
		"Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "Whitespace"
	};


	public Ca21Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ca21Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'extern'", "'export'", "'func'", "'let'", "'mut'", "'int32'", "'bool'", 
		"'string'", "'struct'", "'true'", "'false'", "'while'", "'return'", null, 
		null, null, "';'", "','", "'('", "')'", "'{'", "'}'", "'.'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", "MutKeyword", 
		"Int32Keyword", "BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "String", "Integer", 
		"Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Star", "Slash", "Percentage", "Plus", 
		"Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,5,13,148,8,13,10,13,12,13,151,9,13,
		1,13,1,13,1,14,4,14,156,8,14,11,14,12,14,157,1,14,1,14,4,14,162,8,14,11,
		14,12,14,163,5,14,166,8,14,10,14,12,14,169,9,14,1,15,1,15,5,15,173,8,15,
		10,15,12,15,176,9,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
		1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,
		1,33,1,33,1,149,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,
		0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
		9,10,13,13,32,32,221,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
		31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
		0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
		0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,76,1,0,0,0,5,83,1,0,0,
		0,7,88,1,0,0,0,9,92,1,0,0,0,11,96,1,0,0,0,13,102,1,0,0,0,15,107,1,0,0,
		0,17,114,1,0,0,0,19,121,1,0,0,0,21,126,1,0,0,0,23,132,1,0,0,0,25,138,1,
		0,0,0,27,145,1,0,0,0,29,155,1,0,0,0,31,170,1,0,0,0,33,177,1,0,0,0,35,179,
		1,0,0,0,37,181,1,0,0,0,39,183,1,0,0,0,41,185,1,0,0,0,43,187,1,0,0,0,45,
		189,1,0,0,0,47,191,1,0,0,0,49,193,1,0,0,0,51,195,1,0,0,0,53,197,1,0,0,
		0,55,199,1,0,0,0,57,201,1,0,0,0,59,203,1,0,0,0,61,206,1,0,0,0,63,208,1,
		0,0,0,65,211,1,0,0,0,67,213,1,0,0,0,69,70,5,101,0,0,70,71,5,120,0,0,71,
		72,5,116,0,0,72,73,5,101,0,0,73,74,5,114,0,0,74,75,5,110,0,0,75,2,1,0,
		0,0,76,77,5,101,0,0,77,78,5,120,0,0,78,79,5,112,0,0,79,80,5,111,0,0,80,
		81,5,114,0,0,81,82,5,116,0,0,82,4,1,0,0,0,83,84,5,102,0,0,84,85,5,117,
		0,0,85,86,5,110,0,0,86,87,5,99,0,0,87,6,1,0,0,0,88,89,5,108,0,0,89,90,
		5,101,0,0,90,91,5,116,0,0,91,8,1,0,0,0,92,93,5,109,0,0,93,94,5,117,0,0,
		94,95,5,116,0,0,95,10,1,0,0,0,96,97,5,105,0,0,97,98,5,110,0,0,98,99,5,
		116,0,0,99,100,5,51,0,0,100,101,5,50,0,0,101,12,1,0,0,0,102,103,5,98,0,
		0,103,104,5,111,0,0,104,105,5,111,0,0,105,106,5,108,0,0,106,14,1,0,0,0,
		107,108,5,115,0,0,108,109,5,116,0,0,109,110,5,114,0,0,110,111,5,105,0,
		0,111,112,5,110,0,0,112,113,5,103,0,0,113,16,1,0,0,0,114,115,5,115,0,0,
		115,116,5,116,0,0,116,117,5,114,0,0,117,118,5,117,0,0,118,119,5,99,0,0,
		119,120,5,116,0,0,120,18,1,0,0,0,121,122,5,116,0,0,122,123,5,114,0,0,123,
		124,5,117,0,0,124,125,5,101,0,0,125,20,1,0,0,0,126,127,5,102,0,0,127,128,
		5,97,0,0,128,129,5,108,0,0,129,130,5,115,0,0,130,131,5,101,0,0,131,22,
		1,0,0,0,132,133,5,119,0,0,133,134,5,104,0,0,134,135,5,105,0,0,135,136,
		5,108,0,0,136,137,5,101,0,0,137,24,1,0,0,0,138,139,5,114,0,0,139,140,5,
		101,0,0,140,141,5,116,0,0,141,142,5,117,0,0,142,143,5,114,0,0,143,144,
		5,110,0,0,144,26,1,0,0,0,145,149,5,34,0,0,146,148,9,0,0,0,147,146,1,0,
		0,0,148,151,1,0,0,0,149,150,1,0,0,0,149,147,1,0,0,0,150,152,1,0,0,0,151,
		149,1,0,0,0,152,153,5,34,0,0,153,28,1,0,0,0,154,156,7,0,0,0,155,154,1,
		0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,167,1,0,0,0,
		159,161,5,95,0,0,160,162,7,0,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,
		1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,159,1,0,0,0,166,169,1,0,0,
		0,167,165,1,0,0,0,167,168,1,0,0,0,168,30,1,0,0,0,169,167,1,0,0,0,170,174,
		7,1,0,0,171,173,7,2,0,0,172,171,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,
		0,174,175,1,0,0,0,175,32,1,0,0,0,176,174,1,0,0,0,177,178,5,59,0,0,178,
		34,1,0,0,0,179,180,5,44,0,0,180,36,1,0,0,0,181,182,5,40,0,0,182,38,1,0,
		0,0,183,184,5,41,0,0,184,40,1,0,0,0,185,186,5,123,0,0,186,42,1,0,0,0,187,
		188,5,125,0,0,188,44,1,0,0,0,189,190,5,46,0,0,190,46,1,0,0,0,191,192,5,
		42,0,0,192,48,1,0,0,0,193,194,5,47,0,0,194,50,1,0,0,0,195,196,5,37,0,0,
		196,52,1,0,0,0,197,198,5,43,0,0,198,54,1,0,0,0,199,200,5,45,0,0,200,56,
		1,0,0,0,201,202,5,60,0,0,202,58,1,0,0,0,203,204,5,60,0,0,204,205,5,61,
		0,0,205,60,1,0,0,0,206,207,5,62,0,0,207,62,1,0,0,0,208,209,5,62,0,0,209,
		210,5,61,0,0,210,64,1,0,0,0,211,212,5,61,0,0,212,66,1,0,0,0,213,214,7,
		3,0,0,214,215,1,0,0,0,215,216,6,33,0,0,216,68,1,0,0,0,6,0,149,157,163,
		167,174,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
