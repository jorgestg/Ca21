//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ca21Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, ExternKeyword=2, ExportKeyword=3, FuncKeyword=4, LetKeyword=5, 
		MutKeyword=6, IfKeyword=7, Int32Keyword=8, Int64Keyword=9, BoolKeyword=10, 
		StringKeyword=11, StructKeyword=12, TrueKeyword=13, FalseKeyword=14, WhileKeyword=15, 
		ReturnKeyword=16, String=17, Integer=18, Identifier=19, Semicolon=20, 
		Comma=21, LeftParenthesis=22, RightParenthesis=23, LeftBrace=24, RightBrace=25, 
		Dot=26, Star=27, Slash=28, Percentage=29, Plus=30, Minus=31, LessThan=32, 
		LessThanOrEqual=33, GreaterThan=34, GreaterThanOrEqual=35, Equal=36, Whitespace=37;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", 
		"MutKeyword", "IfKeyword", "Int32Keyword", "Int64Keyword", "BoolKeyword", 
		"StringKeyword", "StructKeyword", "TrueKeyword", "FalseKeyword", "WhileKeyword", 
		"ReturnKeyword", "String", "Integer", "Identifier", "Semicolon", "Comma", 
		"LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", "Dot", 
		"Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", "LessThanOrEqual", 
		"GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};


	public Ca21Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ca21Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'else'", "'extern'", "'export'", "'func'", "'let'", "'mut'", "'if'", 
		"'int32'", "'int64'", "'bool'", "'string'", "'struct'", "'true'", "'false'", 
		"'while'", "'return'", null, null, null, "';'", "','", "'('", "')'", "'{'", 
		"'}'", "'.'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", 
		"'>='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", 
		"MutKeyword", "IfKeyword", "Int32Keyword", "Int64Keyword", "BoolKeyword", 
		"StringKeyword", "StructKeyword", "TrueKeyword", "FalseKeyword", "WhileKeyword", 
		"ReturnKeyword", "String", "Integer", "Identifier", "Semicolon", "Comma", 
		"LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", "Dot", 
		"Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", "LessThanOrEqual", 
		"GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,37,237,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
		1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
		1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		5,16,168,8,16,10,16,12,16,171,9,16,1,16,1,16,1,17,4,17,176,8,17,11,17,
		12,17,177,1,17,1,17,4,17,182,8,17,11,17,12,17,183,5,17,186,8,17,10,17,
		12,17,189,9,17,1,18,1,18,5,18,193,8,18,10,18,12,18,196,9,18,1,19,1,19,
		1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
		1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,
		1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,169,0,37,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,4,1,0,48,57,
		3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
		32,241,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,80,
		1,0,0,0,5,87,1,0,0,0,7,94,1,0,0,0,9,99,1,0,0,0,11,103,1,0,0,0,13,107,1,
		0,0,0,15,110,1,0,0,0,17,116,1,0,0,0,19,122,1,0,0,0,21,127,1,0,0,0,23,134,
		1,0,0,0,25,141,1,0,0,0,27,146,1,0,0,0,29,152,1,0,0,0,31,158,1,0,0,0,33,
		165,1,0,0,0,35,175,1,0,0,0,37,190,1,0,0,0,39,197,1,0,0,0,41,199,1,0,0,
		0,43,201,1,0,0,0,45,203,1,0,0,0,47,205,1,0,0,0,49,207,1,0,0,0,51,209,1,
		0,0,0,53,211,1,0,0,0,55,213,1,0,0,0,57,215,1,0,0,0,59,217,1,0,0,0,61,219,
		1,0,0,0,63,221,1,0,0,0,65,223,1,0,0,0,67,226,1,0,0,0,69,228,1,0,0,0,71,
		231,1,0,0,0,73,233,1,0,0,0,75,76,5,101,0,0,76,77,5,108,0,0,77,78,5,115,
		0,0,78,79,5,101,0,0,79,2,1,0,0,0,80,81,5,101,0,0,81,82,5,120,0,0,82,83,
		5,116,0,0,83,84,5,101,0,0,84,85,5,114,0,0,85,86,5,110,0,0,86,4,1,0,0,0,
		87,88,5,101,0,0,88,89,5,120,0,0,89,90,5,112,0,0,90,91,5,111,0,0,91,92,
		5,114,0,0,92,93,5,116,0,0,93,6,1,0,0,0,94,95,5,102,0,0,95,96,5,117,0,0,
		96,97,5,110,0,0,97,98,5,99,0,0,98,8,1,0,0,0,99,100,5,108,0,0,100,101,5,
		101,0,0,101,102,5,116,0,0,102,10,1,0,0,0,103,104,5,109,0,0,104,105,5,117,
		0,0,105,106,5,116,0,0,106,12,1,0,0,0,107,108,5,105,0,0,108,109,5,102,0,
		0,109,14,1,0,0,0,110,111,5,105,0,0,111,112,5,110,0,0,112,113,5,116,0,0,
		113,114,5,51,0,0,114,115,5,50,0,0,115,16,1,0,0,0,116,117,5,105,0,0,117,
		118,5,110,0,0,118,119,5,116,0,0,119,120,5,54,0,0,120,121,5,52,0,0,121,
		18,1,0,0,0,122,123,5,98,0,0,123,124,5,111,0,0,124,125,5,111,0,0,125,126,
		5,108,0,0,126,20,1,0,0,0,127,128,5,115,0,0,128,129,5,116,0,0,129,130,5,
		114,0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,133,5,103,0,0,133,22,1,
		0,0,0,134,135,5,115,0,0,135,136,5,116,0,0,136,137,5,114,0,0,137,138,5,
		117,0,0,138,139,5,99,0,0,139,140,5,116,0,0,140,24,1,0,0,0,141,142,5,116,
		0,0,142,143,5,114,0,0,143,144,5,117,0,0,144,145,5,101,0,0,145,26,1,0,0,
		0,146,147,5,102,0,0,147,148,5,97,0,0,148,149,5,108,0,0,149,150,5,115,0,
		0,150,151,5,101,0,0,151,28,1,0,0,0,152,153,5,119,0,0,153,154,5,104,0,0,
		154,155,5,105,0,0,155,156,5,108,0,0,156,157,5,101,0,0,157,30,1,0,0,0,158,
		159,5,114,0,0,159,160,5,101,0,0,160,161,5,116,0,0,161,162,5,117,0,0,162,
		163,5,114,0,0,163,164,5,110,0,0,164,32,1,0,0,0,165,169,5,34,0,0,166,168,
		9,0,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,170,1,0,0,0,169,167,1,0,0,
		0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,34,0,0,173,34,1,0,0,0,174,
		176,7,0,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,
		0,0,0,178,187,1,0,0,0,179,181,5,95,0,0,180,182,7,0,0,0,181,180,1,0,0,0,
		182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,186,1,0,0,0,185,179,
		1,0,0,0,186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,36,1,0,0,0,
		189,187,1,0,0,0,190,194,7,1,0,0,191,193,7,2,0,0,192,191,1,0,0,0,193,196,
		1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,38,1,0,0,0,196,194,1,0,0,0,
		197,198,5,59,0,0,198,40,1,0,0,0,199,200,5,44,0,0,200,42,1,0,0,0,201,202,
		5,40,0,0,202,44,1,0,0,0,203,204,5,41,0,0,204,46,1,0,0,0,205,206,5,123,
		0,0,206,48,1,0,0,0,207,208,5,125,0,0,208,50,1,0,0,0,209,210,5,46,0,0,210,
		52,1,0,0,0,211,212,5,42,0,0,212,54,1,0,0,0,213,214,5,47,0,0,214,56,1,0,
		0,0,215,216,5,37,0,0,216,58,1,0,0,0,217,218,5,43,0,0,218,60,1,0,0,0,219,
		220,5,45,0,0,220,62,1,0,0,0,221,222,5,60,0,0,222,64,1,0,0,0,223,224,5,
		60,0,0,224,225,5,61,0,0,225,66,1,0,0,0,226,227,5,62,0,0,227,68,1,0,0,0,
		228,229,5,62,0,0,229,230,5,61,0,0,230,70,1,0,0,0,231,232,5,61,0,0,232,
		72,1,0,0,0,233,234,7,3,0,0,234,235,1,0,0,0,235,236,6,36,0,0,236,74,1,0,
		0,0,6,0,169,177,183,187,194,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
