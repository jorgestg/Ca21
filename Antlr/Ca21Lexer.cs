//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ca21Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EnumKeyword=1, ExternKeyword=2, ExportKeyword=3, FuncKeyword=4, ElseKeyword=5, 
		LetKeyword=6, MutKeyword=7, IfKeyword=8, Int32Keyword=9, Int64Keyword=10, 
		BoolKeyword=11, StringKeyword=12, StructKeyword=13, TrueKeyword=14, FalseKeyword=15, 
		WhileKeyword=16, ReturnKeyword=17, String=18, Integer=19, Identifier=20, 
		Semicolon=21, Comma=22, LeftParenthesis=23, RightParenthesis=24, LeftBrace=25, 
		RightBrace=26, Dot=27, Bang=28, Star=29, Slash=30, Percentage=31, Plus=32, 
		Minus=33, LessThan=34, LessThanOrEqual=35, GreaterThan=36, GreaterThanOrEqual=37, 
		Equal=38, DoubleEqual=39, BangEqual=40, DoubleAmpersand=41, DoublePipe=42, 
		Whitespace=43;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EnumKeyword", "ExternKeyword", "ExportKeyword", "FuncKeyword", "ElseKeyword", 
		"LetKeyword", "MutKeyword", "IfKeyword", "Int32Keyword", "Int64Keyword", 
		"BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", "FalseKeyword", 
		"WhileKeyword", "ReturnKeyword", "String", "Integer", "Identifier", "Semicolon", 
		"Comma", "LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", 
		"Dot", "Bang", "Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", 
		"LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", "Equal", "DoubleEqual", 
		"BangEqual", "DoubleAmpersand", "DoublePipe", "Whitespace"
	};


	public Ca21Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ca21Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'enum'", "'extern'", "'export'", "'func'", "'else'", "'let'", "'mut'", 
		"'if'", "'int32'", "'int64'", "'bool'", "'string'", "'struct'", "'true'", 
		"'false'", "'while'", "'return'", null, null, null, "';'", "','", "'('", 
		"')'", "'{'", "'}'", "'.'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'<'", "'<='", "'>'", "'>='", "'='", "'=='", "'!='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EnumKeyword", "ExternKeyword", "ExportKeyword", "FuncKeyword", 
		"ElseKeyword", "LetKeyword", "MutKeyword", "IfKeyword", "Int32Keyword", 
		"Int64Keyword", "BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "String", "Integer", 
		"Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Bang", "Star", "Slash", "Percentage", 
		"Plus", "Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "DoubleEqual", "BangEqual", "DoubleAmpersand", "DoublePipe", 
		"Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,43,268,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,17,1,17,5,17,185,8,17,10,17,12,17,188,9,17,1,17,1,17,1,18,4,18,
		193,8,18,11,18,12,18,194,1,18,1,18,4,18,199,8,18,11,18,12,18,200,5,18,
		203,8,18,10,18,12,18,206,9,18,1,19,1,19,5,19,210,8,19,10,19,12,19,213,
		9,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,
		1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,38,
		1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,186,
		0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,272,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
		0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,92,1,0,0,0,5,99,
		1,0,0,0,7,106,1,0,0,0,9,111,1,0,0,0,11,116,1,0,0,0,13,120,1,0,0,0,15,124,
		1,0,0,0,17,127,1,0,0,0,19,133,1,0,0,0,21,139,1,0,0,0,23,144,1,0,0,0,25,
		151,1,0,0,0,27,158,1,0,0,0,29,163,1,0,0,0,31,169,1,0,0,0,33,175,1,0,0,
		0,35,182,1,0,0,0,37,192,1,0,0,0,39,207,1,0,0,0,41,214,1,0,0,0,43,216,1,
		0,0,0,45,218,1,0,0,0,47,220,1,0,0,0,49,222,1,0,0,0,51,224,1,0,0,0,53,226,
		1,0,0,0,55,228,1,0,0,0,57,230,1,0,0,0,59,232,1,0,0,0,61,234,1,0,0,0,63,
		236,1,0,0,0,65,238,1,0,0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,245,1,0,0,
		0,73,247,1,0,0,0,75,250,1,0,0,0,77,252,1,0,0,0,79,255,1,0,0,0,81,258,1,
		0,0,0,83,261,1,0,0,0,85,264,1,0,0,0,87,88,5,101,0,0,88,89,5,110,0,0,89,
		90,5,117,0,0,90,91,5,109,0,0,91,2,1,0,0,0,92,93,5,101,0,0,93,94,5,120,
		0,0,94,95,5,116,0,0,95,96,5,101,0,0,96,97,5,114,0,0,97,98,5,110,0,0,98,
		4,1,0,0,0,99,100,5,101,0,0,100,101,5,120,0,0,101,102,5,112,0,0,102,103,
		5,111,0,0,103,104,5,114,0,0,104,105,5,116,0,0,105,6,1,0,0,0,106,107,5,
		102,0,0,107,108,5,117,0,0,108,109,5,110,0,0,109,110,5,99,0,0,110,8,1,0,
		0,0,111,112,5,101,0,0,112,113,5,108,0,0,113,114,5,115,0,0,114,115,5,101,
		0,0,115,10,1,0,0,0,116,117,5,108,0,0,117,118,5,101,0,0,118,119,5,116,0,
		0,119,12,1,0,0,0,120,121,5,109,0,0,121,122,5,117,0,0,122,123,5,116,0,0,
		123,14,1,0,0,0,124,125,5,105,0,0,125,126,5,102,0,0,126,16,1,0,0,0,127,
		128,5,105,0,0,128,129,5,110,0,0,129,130,5,116,0,0,130,131,5,51,0,0,131,
		132,5,50,0,0,132,18,1,0,0,0,133,134,5,105,0,0,134,135,5,110,0,0,135,136,
		5,116,0,0,136,137,5,54,0,0,137,138,5,52,0,0,138,20,1,0,0,0,139,140,5,98,
		0,0,140,141,5,111,0,0,141,142,5,111,0,0,142,143,5,108,0,0,143,22,1,0,0,
		0,144,145,5,115,0,0,145,146,5,116,0,0,146,147,5,114,0,0,147,148,5,105,
		0,0,148,149,5,110,0,0,149,150,5,103,0,0,150,24,1,0,0,0,151,152,5,115,0,
		0,152,153,5,116,0,0,153,154,5,114,0,0,154,155,5,117,0,0,155,156,5,99,0,
		0,156,157,5,116,0,0,157,26,1,0,0,0,158,159,5,116,0,0,159,160,5,114,0,0,
		160,161,5,117,0,0,161,162,5,101,0,0,162,28,1,0,0,0,163,164,5,102,0,0,164,
		165,5,97,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,168,5,101,0,0,168,
		30,1,0,0,0,169,170,5,119,0,0,170,171,5,104,0,0,171,172,5,105,0,0,172,173,
		5,108,0,0,173,174,5,101,0,0,174,32,1,0,0,0,175,176,5,114,0,0,176,177,5,
		101,0,0,177,178,5,116,0,0,178,179,5,117,0,0,179,180,5,114,0,0,180,181,
		5,110,0,0,181,34,1,0,0,0,182,186,5,34,0,0,183,185,9,0,0,0,184,183,1,0,
		0,0,185,188,1,0,0,0,186,187,1,0,0,0,186,184,1,0,0,0,187,189,1,0,0,0,188,
		186,1,0,0,0,189,190,5,34,0,0,190,36,1,0,0,0,191,193,7,0,0,0,192,191,1,
		0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,204,1,0,0,0,
		196,198,5,95,0,0,197,199,7,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,198,
		1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,196,1,0,0,0,203,206,1,0,0,
		0,204,202,1,0,0,0,204,205,1,0,0,0,205,38,1,0,0,0,206,204,1,0,0,0,207,211,
		7,1,0,0,208,210,7,2,0,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,
		0,211,212,1,0,0,0,212,40,1,0,0,0,213,211,1,0,0,0,214,215,5,59,0,0,215,
		42,1,0,0,0,216,217,5,44,0,0,217,44,1,0,0,0,218,219,5,40,0,0,219,46,1,0,
		0,0,220,221,5,41,0,0,221,48,1,0,0,0,222,223,5,123,0,0,223,50,1,0,0,0,224,
		225,5,125,0,0,225,52,1,0,0,0,226,227,5,46,0,0,227,54,1,0,0,0,228,229,5,
		33,0,0,229,56,1,0,0,0,230,231,5,42,0,0,231,58,1,0,0,0,232,233,5,47,0,0,
		233,60,1,0,0,0,234,235,5,37,0,0,235,62,1,0,0,0,236,237,5,43,0,0,237,64,
		1,0,0,0,238,239,5,45,0,0,239,66,1,0,0,0,240,241,5,60,0,0,241,68,1,0,0,
		0,242,243,5,60,0,0,243,244,5,61,0,0,244,70,1,0,0,0,245,246,5,62,0,0,246,
		72,1,0,0,0,247,248,5,62,0,0,248,249,5,61,0,0,249,74,1,0,0,0,250,251,5,
		61,0,0,251,76,1,0,0,0,252,253,5,61,0,0,253,254,5,61,0,0,254,78,1,0,0,0,
		255,256,5,33,0,0,256,257,5,61,0,0,257,80,1,0,0,0,258,259,5,38,0,0,259,
		260,5,38,0,0,260,82,1,0,0,0,261,262,5,124,0,0,262,263,5,124,0,0,263,84,
		1,0,0,0,264,265,7,3,0,0,265,266,1,0,0,0,266,267,6,42,0,0,267,86,1,0,0,
		0,6,0,186,194,200,204,211,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
