//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Ca21Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ExternKeyword=1, ExportKeyword=2, FuncKeyword=3, LetKeyword=4, MutKeyword=5, 
		Int32Keyword=6, BoolKeyword=7, StrKeyword=8, TrueKeyword=9, FalseKeyword=10, 
		WhileKeyword=11, ReturnKeyword=12, String=13, Integer=14, Identifier=15, 
		Comma=16, LeftParenthesis=17, RightParenthesis=18, LeftBrace=19, RightBrace=20, 
		Semicolon=21, Star=22, Slash=23, Percentage=24, Plus=25, Minus=26, LessThan=27, 
		LessThanOrEqual=28, GreaterThan=29, GreaterThanOrEqual=30, Equal=31, Whitespace=32;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", "MutKeyword", 
		"Int32Keyword", "BoolKeyword", "StrKeyword", "TrueKeyword", "FalseKeyword", 
		"WhileKeyword", "ReturnKeyword", "String", "Integer", "Identifier", "Comma", 
		"LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", "Semicolon", 
		"Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", "LessThanOrEqual", 
		"GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};


	public Ca21Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ca21Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'extern'", "'export'", "'func'", "'let'", "'mut'", "'int32'", "'bool'", 
		"'str'", "'true'", "'false'", "'while'", "'return'", null, null, null, 
		"','", "'('", "')'", "'{'", "'}'", "';'", "'*'", "'/'", "'%'", "'+'", 
		"'-'", "'<'", "'<='", "'>'", "'>='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", "MutKeyword", 
		"Int32Keyword", "BoolKeyword", "StrKeyword", "TrueKeyword", "FalseKeyword", 
		"WhileKeyword", "ReturnKeyword", "String", "Integer", "Identifier", "Comma", 
		"LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", "Semicolon", 
		"Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", "LessThanOrEqual", 
		"GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,201,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
		4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,5,12,134,8,12,10,12,12,12,137,
		9,12,1,12,1,12,1,13,4,13,142,8,13,11,13,12,13,143,1,13,1,13,4,13,148,8,
		13,11,13,12,13,149,5,13,152,8,13,10,13,12,13,155,9,13,1,14,1,14,5,14,159,
		8,14,10,14,12,14,162,9,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,
		1,31,1,135,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,4,1,0,48,57,3,0,
		65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,205,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,72,
		1,0,0,0,5,79,1,0,0,0,7,84,1,0,0,0,9,88,1,0,0,0,11,92,1,0,0,0,13,98,1,0,
		0,0,15,103,1,0,0,0,17,107,1,0,0,0,19,112,1,0,0,0,21,118,1,0,0,0,23,124,
		1,0,0,0,25,131,1,0,0,0,27,141,1,0,0,0,29,156,1,0,0,0,31,163,1,0,0,0,33,
		165,1,0,0,0,35,167,1,0,0,0,37,169,1,0,0,0,39,171,1,0,0,0,41,173,1,0,0,
		0,43,175,1,0,0,0,45,177,1,0,0,0,47,179,1,0,0,0,49,181,1,0,0,0,51,183,1,
		0,0,0,53,185,1,0,0,0,55,187,1,0,0,0,57,190,1,0,0,0,59,192,1,0,0,0,61,195,
		1,0,0,0,63,197,1,0,0,0,65,66,5,101,0,0,66,67,5,120,0,0,67,68,5,116,0,0,
		68,69,5,101,0,0,69,70,5,114,0,0,70,71,5,110,0,0,71,2,1,0,0,0,72,73,5,101,
		0,0,73,74,5,120,0,0,74,75,5,112,0,0,75,76,5,111,0,0,76,77,5,114,0,0,77,
		78,5,116,0,0,78,4,1,0,0,0,79,80,5,102,0,0,80,81,5,117,0,0,81,82,5,110,
		0,0,82,83,5,99,0,0,83,6,1,0,0,0,84,85,5,108,0,0,85,86,5,101,0,0,86,87,
		5,116,0,0,87,8,1,0,0,0,88,89,5,109,0,0,89,90,5,117,0,0,90,91,5,116,0,0,
		91,10,1,0,0,0,92,93,5,105,0,0,93,94,5,110,0,0,94,95,5,116,0,0,95,96,5,
		51,0,0,96,97,5,50,0,0,97,12,1,0,0,0,98,99,5,98,0,0,99,100,5,111,0,0,100,
		101,5,111,0,0,101,102,5,108,0,0,102,14,1,0,0,0,103,104,5,115,0,0,104,105,
		5,116,0,0,105,106,5,114,0,0,106,16,1,0,0,0,107,108,5,116,0,0,108,109,5,
		114,0,0,109,110,5,117,0,0,110,111,5,101,0,0,111,18,1,0,0,0,112,113,5,102,
		0,0,113,114,5,97,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,117,5,101,
		0,0,117,20,1,0,0,0,118,119,5,119,0,0,119,120,5,104,0,0,120,121,5,105,0,
		0,121,122,5,108,0,0,122,123,5,101,0,0,123,22,1,0,0,0,124,125,5,114,0,0,
		125,126,5,101,0,0,126,127,5,116,0,0,127,128,5,117,0,0,128,129,5,114,0,
		0,129,130,5,110,0,0,130,24,1,0,0,0,131,135,5,34,0,0,132,134,9,0,0,0,133,
		132,1,0,0,0,134,137,1,0,0,0,135,136,1,0,0,0,135,133,1,0,0,0,136,138,1,
		0,0,0,137,135,1,0,0,0,138,139,5,34,0,0,139,26,1,0,0,0,140,142,7,0,0,0,
		141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,153,
		1,0,0,0,145,147,5,95,0,0,146,148,7,0,0,0,147,146,1,0,0,0,148,149,1,0,0,
		0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,145,1,0,0,0,152,
		155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,28,1,0,0,0,155,153,1,0,
		0,0,156,160,7,1,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,
		158,1,0,0,0,160,161,1,0,0,0,161,30,1,0,0,0,162,160,1,0,0,0,163,164,5,44,
		0,0,164,32,1,0,0,0,165,166,5,40,0,0,166,34,1,0,0,0,167,168,5,41,0,0,168,
		36,1,0,0,0,169,170,5,123,0,0,170,38,1,0,0,0,171,172,5,125,0,0,172,40,1,
		0,0,0,173,174,5,59,0,0,174,42,1,0,0,0,175,176,5,42,0,0,176,44,1,0,0,0,
		177,178,5,47,0,0,178,46,1,0,0,0,179,180,5,37,0,0,180,48,1,0,0,0,181,182,
		5,43,0,0,182,50,1,0,0,0,183,184,5,45,0,0,184,52,1,0,0,0,185,186,5,60,0,
		0,186,54,1,0,0,0,187,188,5,60,0,0,188,189,5,61,0,0,189,56,1,0,0,0,190,
		191,5,62,0,0,191,58,1,0,0,0,192,193,5,62,0,0,193,194,5,61,0,0,194,60,1,
		0,0,0,195,196,5,61,0,0,196,62,1,0,0,0,197,198,7,3,0,0,198,199,1,0,0,0,
		199,200,6,31,0,0,200,64,1,0,0,0,6,0,135,143,149,153,160,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
