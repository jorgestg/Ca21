//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ca21Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EnumKeyword=1, ExternKeyword=2, ExportKeyword=3, FuncKeyword=4, ElseKeyword=5, 
		LetKeyword=6, MutKeyword=7, IfKeyword=8, Int32Keyword=9, Int64Keyword=10, 
		BoolKeyword=11, StringKeyword=12, StructKeyword=13, TrueKeyword=14, FalseKeyword=15, 
		WhileKeyword=16, ReturnKeyword=17, USizeKeyword=18, String=19, Integer=20, 
		Identifier=21, Semicolon=22, Comma=23, LeftParenthesis=24, RightParenthesis=25, 
		LeftBrace=26, RightBrace=27, Dot=28, Bang=29, Star=30, Slash=31, Percentage=32, 
		Plus=33, Minus=34, LessThan=35, LessThanOrEqual=36, GreaterThan=37, GreaterThanOrEqual=38, 
		Equal=39, DoubleEqual=40, BangEqual=41, DoubleAmpersand=42, DoublePipe=43, 
		Whitespace=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"EnumKeyword", "ExternKeyword", "ExportKeyword", "FuncKeyword", "ElseKeyword", 
		"LetKeyword", "MutKeyword", "IfKeyword", "Int32Keyword", "Int64Keyword", 
		"BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", "FalseKeyword", 
		"WhileKeyword", "ReturnKeyword", "USizeKeyword", "String", "Integer", 
		"Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Bang", "Star", "Slash", "Percentage", 
		"Plus", "Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "DoubleEqual", "BangEqual", "DoubleAmpersand", "DoublePipe", 
		"Whitespace"
	};


	public Ca21Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ca21Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'enum'", "'extern'", "'export'", "'func'", "'else'", "'let'", "'mut'", 
		"'if'", "'int32'", "'int64'", "'bool'", "'string'", "'struct'", "'true'", 
		"'false'", "'while'", "'return'", "'usize'", null, null, null, "';'", 
		"','", "'('", "')'", "'{'", "'}'", "'.'", "'!'", "'*'", "'/'", "'%'", 
		"'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'='", "'=='", "'!='", "'&&'", 
		"'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EnumKeyword", "ExternKeyword", "ExportKeyword", "FuncKeyword", 
		"ElseKeyword", "LetKeyword", "MutKeyword", "IfKeyword", "Int32Keyword", 
		"Int64Keyword", "BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "USizeKeyword", "String", 
		"Integer", "Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Bang", "Star", "Slash", "Percentage", 
		"Plus", "Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "DoubleEqual", "BangEqual", "DoubleAmpersand", "DoublePipe", 
		"Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,276,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
		1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
		1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,5,18,193,8,18,10,
		18,12,18,196,9,18,1,18,1,18,1,19,4,19,201,8,19,11,19,12,19,202,1,19,1,
		19,4,19,207,8,19,11,19,12,19,208,5,19,211,8,19,10,19,12,19,214,9,19,1,
		20,1,20,5,20,218,8,20,10,20,12,20,221,9,20,1,21,1,21,1,22,1,22,1,23,1,
		23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
		30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
		37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,
		42,1,42,1,42,1,43,1,43,1,43,1,43,1,194,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
		122,3,0,9,10,13,13,32,32,280,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,94,1,0,0,0,5,101,1,0,0,0,7,
		108,1,0,0,0,9,113,1,0,0,0,11,118,1,0,0,0,13,122,1,0,0,0,15,126,1,0,0,0,
		17,129,1,0,0,0,19,135,1,0,0,0,21,141,1,0,0,0,23,146,1,0,0,0,25,153,1,0,
		0,0,27,160,1,0,0,0,29,165,1,0,0,0,31,171,1,0,0,0,33,177,1,0,0,0,35,184,
		1,0,0,0,37,190,1,0,0,0,39,200,1,0,0,0,41,215,1,0,0,0,43,222,1,0,0,0,45,
		224,1,0,0,0,47,226,1,0,0,0,49,228,1,0,0,0,51,230,1,0,0,0,53,232,1,0,0,
		0,55,234,1,0,0,0,57,236,1,0,0,0,59,238,1,0,0,0,61,240,1,0,0,0,63,242,1,
		0,0,0,65,244,1,0,0,0,67,246,1,0,0,0,69,248,1,0,0,0,71,250,1,0,0,0,73,253,
		1,0,0,0,75,255,1,0,0,0,77,258,1,0,0,0,79,260,1,0,0,0,81,263,1,0,0,0,83,
		266,1,0,0,0,85,269,1,0,0,0,87,272,1,0,0,0,89,90,5,101,0,0,90,91,5,110,
		0,0,91,92,5,117,0,0,92,93,5,109,0,0,93,2,1,0,0,0,94,95,5,101,0,0,95,96,
		5,120,0,0,96,97,5,116,0,0,97,98,5,101,0,0,98,99,5,114,0,0,99,100,5,110,
		0,0,100,4,1,0,0,0,101,102,5,101,0,0,102,103,5,120,0,0,103,104,5,112,0,
		0,104,105,5,111,0,0,105,106,5,114,0,0,106,107,5,116,0,0,107,6,1,0,0,0,
		108,109,5,102,0,0,109,110,5,117,0,0,110,111,5,110,0,0,111,112,5,99,0,0,
		112,8,1,0,0,0,113,114,5,101,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,
		117,5,101,0,0,117,10,1,0,0,0,118,119,5,108,0,0,119,120,5,101,0,0,120,121,
		5,116,0,0,121,12,1,0,0,0,122,123,5,109,0,0,123,124,5,117,0,0,124,125,5,
		116,0,0,125,14,1,0,0,0,126,127,5,105,0,0,127,128,5,102,0,0,128,16,1,0,
		0,0,129,130,5,105,0,0,130,131,5,110,0,0,131,132,5,116,0,0,132,133,5,51,
		0,0,133,134,5,50,0,0,134,18,1,0,0,0,135,136,5,105,0,0,136,137,5,110,0,
		0,137,138,5,116,0,0,138,139,5,54,0,0,139,140,5,52,0,0,140,20,1,0,0,0,141,
		142,5,98,0,0,142,143,5,111,0,0,143,144,5,111,0,0,144,145,5,108,0,0,145,
		22,1,0,0,0,146,147,5,115,0,0,147,148,5,116,0,0,148,149,5,114,0,0,149,150,
		5,105,0,0,150,151,5,110,0,0,151,152,5,103,0,0,152,24,1,0,0,0,153,154,5,
		115,0,0,154,155,5,116,0,0,155,156,5,114,0,0,156,157,5,117,0,0,157,158,
		5,99,0,0,158,159,5,116,0,0,159,26,1,0,0,0,160,161,5,116,0,0,161,162,5,
		114,0,0,162,163,5,117,0,0,163,164,5,101,0,0,164,28,1,0,0,0,165,166,5,102,
		0,0,166,167,5,97,0,0,167,168,5,108,0,0,168,169,5,115,0,0,169,170,5,101,
		0,0,170,30,1,0,0,0,171,172,5,119,0,0,172,173,5,104,0,0,173,174,5,105,0,
		0,174,175,5,108,0,0,175,176,5,101,0,0,176,32,1,0,0,0,177,178,5,114,0,0,
		178,179,5,101,0,0,179,180,5,116,0,0,180,181,5,117,0,0,181,182,5,114,0,
		0,182,183,5,110,0,0,183,34,1,0,0,0,184,185,5,117,0,0,185,186,5,115,0,0,
		186,187,5,105,0,0,187,188,5,122,0,0,188,189,5,101,0,0,189,36,1,0,0,0,190,
		194,5,34,0,0,191,193,9,0,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,195,1,
		0,0,0,194,192,1,0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,34,0,0,
		198,38,1,0,0,0,199,201,7,0,0,0,200,199,1,0,0,0,201,202,1,0,0,0,202,200,
		1,0,0,0,202,203,1,0,0,0,203,212,1,0,0,0,204,206,5,95,0,0,205,207,7,0,0,
		0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,
		211,1,0,0,0,210,204,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,
		0,0,0,213,40,1,0,0,0,214,212,1,0,0,0,215,219,7,1,0,0,216,218,7,2,0,0,217,
		216,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,42,1,0,
		0,0,221,219,1,0,0,0,222,223,5,59,0,0,223,44,1,0,0,0,224,225,5,44,0,0,225,
		46,1,0,0,0,226,227,5,40,0,0,227,48,1,0,0,0,228,229,5,41,0,0,229,50,1,0,
		0,0,230,231,5,123,0,0,231,52,1,0,0,0,232,233,5,125,0,0,233,54,1,0,0,0,
		234,235,5,46,0,0,235,56,1,0,0,0,236,237,5,33,0,0,237,58,1,0,0,0,238,239,
		5,42,0,0,239,60,1,0,0,0,240,241,5,47,0,0,241,62,1,0,0,0,242,243,5,37,0,
		0,243,64,1,0,0,0,244,245,5,43,0,0,245,66,1,0,0,0,246,247,5,45,0,0,247,
		68,1,0,0,0,248,249,5,60,0,0,249,70,1,0,0,0,250,251,5,60,0,0,251,252,5,
		61,0,0,252,72,1,0,0,0,253,254,5,62,0,0,254,74,1,0,0,0,255,256,5,62,0,0,
		256,257,5,61,0,0,257,76,1,0,0,0,258,259,5,61,0,0,259,78,1,0,0,0,260,261,
		5,61,0,0,261,262,5,61,0,0,262,80,1,0,0,0,263,264,5,33,0,0,264,265,5,61,
		0,0,265,82,1,0,0,0,266,267,5,38,0,0,267,268,5,38,0,0,268,84,1,0,0,0,269,
		270,5,124,0,0,270,271,5,124,0,0,271,86,1,0,0,0,272,273,7,3,0,0,273,274,
		1,0,0,0,274,275,6,43,0,0,275,88,1,0,0,0,6,0,194,202,208,212,219,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
