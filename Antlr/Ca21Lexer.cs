//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Ca21Lexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FuncKeyword=1, LetKeyword=2, MutKeyword=3, Int32Keyword=4, TrueKeyword=5, 
		FalseKeyword=6, WhileKeyword=7, ReturnKeyword=8, Integer=9, Identifier=10, 
		Comma=11, LeftParenthesis=12, RightParenthesis=13, LeftBrace=14, RightBrace=15, 
		Semicolon=16, Star=17, Slash=18, Percentage=19, Plus=20, Minus=21, LessThan=22, 
		LessThanOrEqual=23, GreaterThan=24, GreaterThanOrEqual=25, Equal=26, Whitespace=27;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"FuncKeyword", "LetKeyword", "MutKeyword", "Int32Keyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "Integer", "Identifier", 
		"Comma", "LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", 
		"Semicolon", "Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", 
		"LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};


	public Ca21Lexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public Ca21Lexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'let'", "'mut'", "'int32'", "'true'", "'false'", "'while'", 
		"'return'", null, null, "','", "'('", "')'", "'{'", "'}'", "';'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FuncKeyword", "LetKeyword", "MutKeyword", "Int32Keyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "Integer", "Identifier", 
		"Comma", "LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", 
		"Semicolon", "Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", 
		"LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Lexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,27,159,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,
		1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
		4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,4,8,100,8,8,11,8,12,8,101,1,8,1,8,4,8,106,8,8,11,8,
		12,8,107,5,8,110,8,8,10,8,12,8,113,9,8,1,9,1,9,5,9,117,8,9,10,9,12,9,120,
		9,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,
		23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,0,0,27,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,
		4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
		10,13,13,32,32,162,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
		1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
		0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,1,55,1,0,0,0,3,60,1,0,0,0,5,64,1,0,0,0,7,68,1,0,0,0,9,74,1,0,0,
		0,11,79,1,0,0,0,13,85,1,0,0,0,15,91,1,0,0,0,17,99,1,0,0,0,19,114,1,0,0,
		0,21,121,1,0,0,0,23,123,1,0,0,0,25,125,1,0,0,0,27,127,1,0,0,0,29,129,1,
		0,0,0,31,131,1,0,0,0,33,133,1,0,0,0,35,135,1,0,0,0,37,137,1,0,0,0,39,139,
		1,0,0,0,41,141,1,0,0,0,43,143,1,0,0,0,45,145,1,0,0,0,47,148,1,0,0,0,49,
		150,1,0,0,0,51,153,1,0,0,0,53,155,1,0,0,0,55,56,5,102,0,0,56,57,5,117,
		0,0,57,58,5,110,0,0,58,59,5,99,0,0,59,2,1,0,0,0,60,61,5,108,0,0,61,62,
		5,101,0,0,62,63,5,116,0,0,63,4,1,0,0,0,64,65,5,109,0,0,65,66,5,117,0,0,
		66,67,5,116,0,0,67,6,1,0,0,0,68,69,5,105,0,0,69,70,5,110,0,0,70,71,5,116,
		0,0,71,72,5,51,0,0,72,73,5,50,0,0,73,8,1,0,0,0,74,75,5,116,0,0,75,76,5,
		114,0,0,76,77,5,117,0,0,77,78,5,101,0,0,78,10,1,0,0,0,79,80,5,102,0,0,
		80,81,5,97,0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,84,12,1,
		0,0,0,85,86,5,119,0,0,86,87,5,104,0,0,87,88,5,105,0,0,88,89,5,108,0,0,
		89,90,5,101,0,0,90,14,1,0,0,0,91,92,5,114,0,0,92,93,5,101,0,0,93,94,5,
		116,0,0,94,95,5,117,0,0,95,96,5,114,0,0,96,97,5,110,0,0,97,16,1,0,0,0,
		98,100,7,0,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,
		0,0,0,102,111,1,0,0,0,103,105,5,95,0,0,104,106,7,0,0,0,105,104,1,0,0,0,
		106,107,1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,103,
		1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,18,1,0,0,0,
		113,111,1,0,0,0,114,118,7,1,0,0,115,117,7,2,0,0,116,115,1,0,0,0,117,120,
		1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,20,1,0,0,0,120,118,1,0,0,0,
		121,122,5,44,0,0,122,22,1,0,0,0,123,124,5,40,0,0,124,24,1,0,0,0,125,126,
		5,41,0,0,126,26,1,0,0,0,127,128,5,123,0,0,128,28,1,0,0,0,129,130,5,125,
		0,0,130,30,1,0,0,0,131,132,5,59,0,0,132,32,1,0,0,0,133,134,5,42,0,0,134,
		34,1,0,0,0,135,136,5,47,0,0,136,36,1,0,0,0,137,138,5,37,0,0,138,38,1,0,
		0,0,139,140,5,43,0,0,140,40,1,0,0,0,141,142,5,45,0,0,142,42,1,0,0,0,143,
		144,5,60,0,0,144,44,1,0,0,0,145,146,5,60,0,0,146,147,5,61,0,0,147,46,1,
		0,0,0,148,149,5,62,0,0,149,48,1,0,0,0,150,151,5,62,0,0,151,152,5,61,0,
		0,152,50,1,0,0,0,153,154,5,61,0,0,154,52,1,0,0,0,155,156,7,3,0,0,156,157,
		1,0,0,0,157,158,6,26,0,0,158,54,1,0,0,0,5,0,101,107,111,118,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
