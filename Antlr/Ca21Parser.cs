//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Ca21Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FuncKeyword=1, LetKeyword=2, MutKeyword=3, Int32Keyword=4, TrueKeyword=5, 
		FalseKeyword=6, WhileKeyword=7, ReturnKeyword=8, Integer=9, Identifier=10, 
		LeftParenthesis=11, RightParenthesis=12, LeftBrace=13, RightBrace=14, 
		Semicolon=15, Star=16, Slash=17, Percentage=18, Plus=19, Minus=20, LessThan=21, 
		LessThanOrEqual=22, GreaterThan=23, GreaterThanOrEqual=24, Equal=25, Whitespace=26;
	public const int
		RULE_compilationUnit = 0, RULE_functionDefinition = 1, RULE_functionSignature = 2, 
		RULE_typeReference = 3, RULE_typeKeyword = 4, RULE_block = 5, RULE_statement = 6, 
		RULE_localDeclaration = 7, RULE_expressionOrBlock = 8, RULE_expression = 9, 
		RULE_literal = 10;
	public static readonly string[] ruleNames = {
		"compilationUnit", "functionDefinition", "functionSignature", "typeReference", 
		"typeKeyword", "block", "statement", "localDeclaration", "expressionOrBlock", 
		"expression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'func'", "'let'", "'mut'", "'int32'", "'true'", "'false'", "'while'", 
		"'return'", null, null, "'('", "')'", "'{'", "'}'", "';'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FuncKeyword", "LetKeyword", "MutKeyword", "Int32Keyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "Integer", "Identifier", 
		"LeftParenthesis", "RightParenthesis", "LeftBrace", "RightBrace", "Semicolon", 
		"Star", "Slash", "Percentage", "Plus", "Minus", "LessThan", "LessThanOrEqual", 
		"GreaterThan", "GreaterThanOrEqual", "Equal", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ca21Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ca21Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public FunctionDefinitionContext _functionDefinition;
		public IList<FunctionDefinitionContext> _Functions = new List<FunctionDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ca21Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext[] functionDefinition() {
			return GetRuleContexts<FunctionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition(int i) {
			return GetRuleContext<FunctionDefinitionContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22;
				_localctx._functionDefinition = functionDefinition();
				_localctx._Functions.Add(_localctx._functionDefinition);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FuncKeyword );
			State = 27;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public FunctionSignatureContext Signature;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_functionDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_localctx.Signature = functionSignature();
			State = 30;
			_localctx.Body = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IToken Name;
		public TypeReferenceContext ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FuncKeyword() { return GetToken(Ca21Parser.FuncKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(Ca21Parser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(Ca21Parser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSignature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(FuncKeyword);
			State = 33;
			_localctx.Name = Match(Identifier);
			State = 34;
			Match(LeftParenthesis);
			State = 35;
			Match(RightParenthesis);
			State = 36;
			_localctx.ReturnType = typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
	 
		public TypeReferenceContext() { }
		public virtual void CopyFrom(TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NativeTypeReferenceContext : TypeReferenceContext {
		public TypeKeywordContext NativeType;
		[System.Diagnostics.DebuggerNonUserCode] public TypeKeywordContext typeKeyword() {
			return GetRuleContext<TypeKeywordContext>(0);
		}
		public NativeTypeReferenceContext(TypeReferenceContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeReference);
		try {
			_localctx = new NativeTypeReferenceContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			((NativeTypeReferenceContext)_localctx).NativeType = typeKeyword();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeKeywordContext : ParserRuleContext {
		public IToken Keyword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32Keyword() { return GetToken(Ca21Parser.Int32Keyword, 0); }
		public TypeKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeKeyword; } }
	}

	[RuleVersion(0)]
	public TypeKeywordContext typeKeyword() {
		TypeKeywordContext _localctx = new TypeKeywordContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeKeyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_localctx.Keyword = Match(Int32Keyword);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(LeftBrace);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10212L) != 0)) {
				{
				{
				State = 43;
				_localctx._statement = statement();
				_localctx._Statements.Add(_localctx._statement);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReturnKeyword() { return GetToken(Ca21Parser.ReturnKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BlockStatementContext : StatementContext {
		public BlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext Condition;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WhileKeyword() { return GetToken(Ca21Parser.WhileKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class LocalDeclarationStatementContext : StatementContext {
		public LocalDeclarationContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public LocalDeclarationContext localDeclaration() {
			return GetRuleContext<LocalDeclarationContext>(0);
		}
		public LocalDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LetKeyword:
				_localctx = new LocalDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				((LocalDeclarationStatementContext)_localctx).Declaration = localDeclaration();
				}
				break;
			case WhileKeyword:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52;
				Match(WhileKeyword);
				State = 53;
				((WhileStatementContext)_localctx).Condition = expression(0);
				State = 54;
				((WhileStatementContext)_localctx).Body = block();
				}
				break;
			case ReturnKeyword:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(ReturnKeyword);
				State = 57;
				((ReturnStatementContext)_localctx).Value = expressionOrBlock();
				State = 58;
				Match(Semicolon);
				}
				break;
			case LeftBrace:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 60;
				((BlockStatementContext)_localctx).Block = block();
				}
				break;
			case TrueKeyword:
			case FalseKeyword:
			case Integer:
			case Identifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 61;
				((ExpressionStatementContext)_localctx).Expression = expression(0);
				State = 62;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDeclarationContext : ParserRuleContext {
		public IToken MutModifier;
		public IToken Name;
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LetKeyword() { return GetToken(Ca21Parser.LetKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MutKeyword() { return GetToken(Ca21Parser.MutKeyword, 0); }
		public LocalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDeclaration; } }
	}

	[RuleVersion(0)]
	public LocalDeclarationContext localDeclaration() {
		LocalDeclarationContext _localctx = new LocalDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_localDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(LetKeyword);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword) {
				{
				State = 67;
				_localctx.MutModifier = Match(MutKeyword);
				}
			}

			State = 70;
			_localctx.Name = Match(Identifier);
			State = 71;
			Match(Equal);
			State = 72;
			_localctx.Value = expressionOrBlock();
			State = 73;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrBlockContext : ParserRuleContext {
		public ExpressionOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrBlock; } }
	 
		public ExpressionOrBlockContext() { }
		public virtual void CopyFrom(ExpressionOrBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NonBlockExpressionContext : ExpressionOrBlockContext {
		public ExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NonBlockExpressionContext(ExpressionOrBlockContext context) { CopyFrom(context); }
	}
	public partial class BlockExpressionContext : ExpressionOrBlockContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		public ExpressionContext Tail;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExpressionContext(ExpressionOrBlockContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionOrBlockContext expressionOrBlock() {
		ExpressionOrBlockContext _localctx = new ExpressionOrBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_expressionOrBlock);
		int _la;
		try {
			int _alt;
			State = 87;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				_localctx = new BlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				Match(LeftBrace);
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 76;
						((BlockExpressionContext)_localctx)._statement = statement();
						((BlockExpressionContext)_localctx)._Statements.Add(((BlockExpressionContext)_localctx)._statement);
						}
						} 
					}
					State = 81;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1632L) != 0)) {
					{
					State = 82;
					((BlockExpressionContext)_localctx).Tail = expression(0);
					}
				}

				State = 85;
				Match(RightBrace);
				}
				break;
			case TrueKeyword:
			case FalseKeyword:
			case Integer:
			case Identifier:
				_localctx = new NonBlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				((NonBlockExpressionContext)_localctx).Expression = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(Ca21Parser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEqual() { return GetToken(Ca21Parser.LessThanOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(Ca21Parser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEqual() { return GetToken(Ca21Parser.GreaterThanOrEqual, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FactorExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(Ca21Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(Ca21Parser.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percentage() { return GetToken(Ca21Parser.Percentage, 0); }
		public FactorExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class TermExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(Ca21Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(Ca21Parser.Minus, 0); }
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Assignee;
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext Literal;
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NameExpressionContext : ExpressionContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext Callee;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(Ca21Parser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(Ca21Parser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TrueKeyword:
			case FalseKeyword:
			case Integer:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 90;
				((LiteralExpressionContext)_localctx).Literal = literal();
				}
				break;
			case Identifier:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91;
				((NameExpressionContext)_localctx).Name = Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 109;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new FactorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FactorExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 94;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 95;
						((FactorExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) ) {
							((FactorExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 96;
						((FactorExpressionContext)_localctx).Right = expression(5);
						}
						break;
					case 2:
						{
						_localctx = new TermExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TermExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 97;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 98;
						((TermExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((TermExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 99;
						((TermExpressionContext)_localctx).Right = expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 100;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 101;
						((ComparisonExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 31457280L) != 0)) ) {
							((ComparisonExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 102;
						((ComparisonExpressionContext)_localctx).Right = expression(3);
						}
						break;
					case 4:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Assignee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 103;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 104;
						Match(Equal);
						State = 105;
						((AssignmentExpressionContext)_localctx).Value = expression(2);
						}
						break;
					case 5:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CallExpressionContext)_localctx).Callee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 106;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 107;
						Match(LeftParenthesis);
						State = 108;
						Match(RightParenthesis);
						}
						break;
					}
					} 
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrueLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TrueKeyword() { return GetToken(Ca21Parser.TrueKeyword, 0); }
		public TrueLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class IntegerLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(Ca21Parser.Integer, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class FalseLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FalseKeyword() { return GetToken(Ca21Parser.FalseKeyword, 0); }
		public FalseLiteralContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 20, RULE_literal);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				((IntegerLiteralContext)_localctx).Value = Match(Integer);
				}
				break;
			case TrueKeyword:
				_localctx = new TrueLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				((TrueLiteralContext)_localctx).Value = Match(TrueKeyword);
				}
				break;
			case FalseKeyword:
				_localctx = new FalseLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 116;
				((FalseLiteralContext)_localctx).Value = Match(FalseKeyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		case 4: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,26,120,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,4,0,24,8,0,11,0,12,0,25,1,0,1,0,1,1,
		1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,5,5,45,8,5,10,
		5,12,5,48,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,3,6,65,8,6,1,7,1,7,3,7,69,8,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,5,8,78,8,
		8,10,8,12,8,81,9,8,1,8,3,8,84,8,8,1,8,1,8,3,8,88,8,8,1,9,1,9,1,9,3,9,93,
		8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,110,
		8,9,10,9,12,9,113,9,9,1,10,1,10,1,10,3,10,118,8,10,1,10,0,1,18,11,0,2,
		4,6,8,10,12,14,16,18,20,0,3,1,0,16,18,1,0,19,20,1,0,21,24,126,0,23,1,0,
		0,0,2,29,1,0,0,0,4,32,1,0,0,0,6,38,1,0,0,0,8,40,1,0,0,0,10,42,1,0,0,0,
		12,64,1,0,0,0,14,66,1,0,0,0,16,87,1,0,0,0,18,92,1,0,0,0,20,117,1,0,0,0,
		22,24,3,2,1,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,1,0,0,0,25,26,1,0,0,0,
		26,27,1,0,0,0,27,28,5,0,0,1,28,1,1,0,0,0,29,30,3,4,2,0,30,31,3,10,5,0,
		31,3,1,0,0,0,32,33,5,1,0,0,33,34,5,10,0,0,34,35,5,11,0,0,35,36,5,12,0,
		0,36,37,3,6,3,0,37,5,1,0,0,0,38,39,3,8,4,0,39,7,1,0,0,0,40,41,5,4,0,0,
		41,9,1,0,0,0,42,46,5,13,0,0,43,45,3,12,6,0,44,43,1,0,0,0,45,48,1,0,0,0,
		46,44,1,0,0,0,46,47,1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,5,14,0,0,
		50,11,1,0,0,0,51,65,3,14,7,0,52,53,5,7,0,0,53,54,3,18,9,0,54,55,3,10,5,
		0,55,65,1,0,0,0,56,57,5,8,0,0,57,58,3,16,8,0,58,59,5,15,0,0,59,65,1,0,
		0,0,60,65,3,10,5,0,61,62,3,18,9,0,62,63,5,15,0,0,63,65,1,0,0,0,64,51,1,
		0,0,0,64,52,1,0,0,0,64,56,1,0,0,0,64,60,1,0,0,0,64,61,1,0,0,0,65,13,1,
		0,0,0,66,68,5,2,0,0,67,69,5,3,0,0,68,67,1,0,0,0,68,69,1,0,0,0,69,70,1,
		0,0,0,70,71,5,10,0,0,71,72,5,25,0,0,72,73,3,16,8,0,73,74,5,15,0,0,74,15,
		1,0,0,0,75,79,5,13,0,0,76,78,3,12,6,0,77,76,1,0,0,0,78,81,1,0,0,0,79,77,
		1,0,0,0,79,80,1,0,0,0,80,83,1,0,0,0,81,79,1,0,0,0,82,84,3,18,9,0,83,82,
		1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,88,5,14,0,0,86,88,3,18,9,0,87,75,
		1,0,0,0,87,86,1,0,0,0,88,17,1,0,0,0,89,90,6,9,-1,0,90,93,3,20,10,0,91,
		93,5,10,0,0,92,89,1,0,0,0,92,91,1,0,0,0,93,111,1,0,0,0,94,95,10,4,0,0,
		95,96,7,0,0,0,96,110,3,18,9,5,97,98,10,3,0,0,98,99,7,1,0,0,99,110,3,18,
		9,4,100,101,10,2,0,0,101,102,7,2,0,0,102,110,3,18,9,3,103,104,10,1,0,0,
		104,105,5,25,0,0,105,110,3,18,9,2,106,107,10,5,0,0,107,108,5,11,0,0,108,
		110,5,12,0,0,109,94,1,0,0,0,109,97,1,0,0,0,109,100,1,0,0,0,109,103,1,0,
		0,0,109,106,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,
		19,1,0,0,0,113,111,1,0,0,0,114,118,5,9,0,0,115,118,5,5,0,0,116,118,5,6,
		0,0,117,114,1,0,0,0,117,115,1,0,0,0,117,116,1,0,0,0,118,21,1,0,0,0,11,
		25,46,64,68,79,83,87,92,109,111,117
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
