//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ca21Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ExternKeyword=1, ExportKeyword=2, FuncKeyword=3, LetKeyword=4, MutKeyword=5, 
		Int32Keyword=6, Int64Keyword=7, BoolKeyword=8, StringKeyword=9, StructKeyword=10, 
		TrueKeyword=11, FalseKeyword=12, WhileKeyword=13, ReturnKeyword=14, String=15, 
		Integer=16, Identifier=17, Semicolon=18, Comma=19, LeftParenthesis=20, 
		RightParenthesis=21, LeftBrace=22, RightBrace=23, Dot=24, Star=25, Slash=26, 
		Percentage=27, Plus=28, Minus=29, LessThan=30, LessThanOrEqual=31, GreaterThan=32, 
		GreaterThanOrEqual=33, Equal=34, Whitespace=35;
	public const int
		RULE_compilationUnit = 0, RULE_topLevelDefinition = 1, RULE_structureDefinition = 2, 
		RULE_fieldDefinition = 3, RULE_functionDefinition = 4, RULE_externModifier = 5, 
		RULE_functionSignature = 6, RULE_parameterList = 7, RULE_parameterDefinition = 8, 
		RULE_typeReference = 9, RULE_typeKeyword = 10, RULE_block = 11, RULE_statement = 12, 
		RULE_localDeclaration = 13, RULE_expressionOrBlock = 14, RULE_expression = 15, 
		RULE_fieldInitializer = 16, RULE_argumentList = 17, RULE_literal = 18;
	public static readonly string[] ruleNames = {
		"compilationUnit", "topLevelDefinition", "structureDefinition", "fieldDefinition", 
		"functionDefinition", "externModifier", "functionSignature", "parameterList", 
		"parameterDefinition", "typeReference", "typeKeyword", "block", "statement", 
		"localDeclaration", "expressionOrBlock", "expression", "fieldInitializer", 
		"argumentList", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'extern'", "'export'", "'func'", "'let'", "'mut'", "'int32'", "'int64'", 
		"'bool'", "'string'", "'struct'", "'true'", "'false'", "'while'", "'return'", 
		null, null, null, "';'", "','", "'('", "')'", "'{'", "'}'", "'.'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ExternKeyword", "ExportKeyword", "FuncKeyword", "LetKeyword", "MutKeyword", 
		"Int32Keyword", "Int64Keyword", "BoolKeyword", "StringKeyword", "StructKeyword", 
		"TrueKeyword", "FalseKeyword", "WhileKeyword", "ReturnKeyword", "String", 
		"Integer", "Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Star", "Slash", "Percentage", "Plus", 
		"Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ca21Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ca21Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public TopLevelDefinitionContext _topLevelDefinition;
		public IList<TopLevelDefinitionContext> _Definitions = new List<TopLevelDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ca21Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDefinitionContext[] topLevelDefinition() {
			return GetRuleContexts<TopLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDefinitionContext topLevelDefinition(int i) {
			return GetRuleContext<TopLevelDefinitionContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 38;
				_localctx._topLevelDefinition = topLevelDefinition();
				_localctx._Definitions.Add(_localctx._topLevelDefinition);
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1038L) != 0) );
			State = 43;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDefinitionContext : ParserRuleContext {
		public TopLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDefinition; } }
	 
		public TopLevelDefinitionContext() { }
		public virtual void CopyFrom(TopLevelDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TopLevelFunctionDefinitionContext : TopLevelDefinitionContext {
		public FunctionDefinitionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TopLevelFunctionDefinitionContext(TopLevelDefinitionContext context) { CopyFrom(context); }
	}
	public partial class TopLevelStructureDefinitionContext : TopLevelDefinitionContext {
		public StructureDefinitionContext Structure;
		[System.Diagnostics.DebuggerNonUserCode] public StructureDefinitionContext structureDefinition() {
			return GetRuleContext<StructureDefinitionContext>(0);
		}
		public TopLevelStructureDefinitionContext(TopLevelDefinitionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TopLevelDefinitionContext topLevelDefinition() {
		TopLevelDefinitionContext _localctx = new TopLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDefinition);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ExternKeyword:
			case ExportKeyword:
			case FuncKeyword:
				_localctx = new TopLevelFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				((TopLevelFunctionDefinitionContext)_localctx).Function = functionDefinition();
				}
				break;
			case StructKeyword:
				_localctx = new TopLevelStructureDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				((TopLevelStructureDefinitionContext)_localctx).Structure = structureDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefinitionContext : ParserRuleContext {
		public IToken Name;
		public FieldDefinitionContext _fieldDefinition;
		public IList<FieldDefinitionContext> _Fields = new List<FieldDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructKeyword() { return GetToken(Ca21Parser.StructKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public StructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDefinition; } }
	}

	[RuleVersion(0)]
	public StructureDefinitionContext structureDefinition() {
		StructureDefinitionContext _localctx = new StructureDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_structureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			Match(StructKeyword);
			State = 50;
			_localctx.Name = Match(Identifier);
			State = 51;
			Match(LeftBrace);
			{
			State = 52;
			_localctx._fieldDefinition = fieldDefinition();
			_localctx._Fields.Add(_localctx._fieldDefinition);
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 53;
				Match(Comma);
				State = 54;
				_localctx._fieldDefinition = fieldDefinition();
				_localctx._Fields.Add(_localctx._fieldDefinition);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 60;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public IToken Name;
		public TypeReferenceContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_fieldDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_localctx.Name = Match(Identifier);
			State = 63;
			_localctx.Type = typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public IToken ExportModifier;
		public ExternModifierContext ExternModifier;
		public FunctionSignatureContext Signature;
		public IToken EndOfDeclaration;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExportKeyword() { return GetToken(Ca21Parser.ExportKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternModifierContext externModifier() {
			return GetRuleContext<ExternModifierContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ExportKeyword) {
				{
				State = 65;
				_localctx.ExportModifier = Match(ExportKeyword);
				}
			}

			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ExternKeyword) {
				{
				State = 68;
				_localctx.ExternModifier = externModifier();
				}
			}

			State = 71;
			_localctx.Signature = functionSignature();
			State = 74;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Semicolon:
				{
				State = 72;
				_localctx.EndOfDeclaration = Match(Semicolon);
				}
				break;
			case LeftBrace:
				{
				State = 73;
				_localctx.Body = block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternModifierContext : ParserRuleContext {
		public IToken ExternName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternKeyword() { return GetToken(Ca21Parser.ExternKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(Ca21Parser.String, 0); }
		public ExternModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externModifier; } }
	}

	[RuleVersion(0)]
	public ExternModifierContext externModifier() {
		ExternModifierContext _localctx = new ExternModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_externModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			Match(ExternKeyword);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==String) {
				{
				State = 77;
				_localctx.ExternName = Match(String);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IToken Name;
		public ParameterListContext ParameterList;
		public TypeReferenceContext ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FuncKeyword() { return GetToken(Ca21Parser.FuncKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(Ca21Parser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(Ca21Parser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(FuncKeyword);
			State = 81;
			_localctx.Name = Match(Identifier);
			State = 82;
			Match(LeftParenthesis);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword || _la==Identifier) {
				{
				State = 83;
				_localctx.ParameterList = parameterList();
				}
			}

			State = 86;
			Match(RightParenthesis);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 132032L) != 0)) {
				{
				State = 87;
				_localctx.ReturnType = typeReference();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDefinitionContext _parameterDefinition;
		public IList<ParameterDefinitionContext> _Parameters = new List<ParameterDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDefinitionContext[] parameterDefinition() {
			return GetRuleContexts<ParameterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDefinitionContext parameterDefinition(int i) {
			return GetRuleContext<ParameterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_localctx._parameterDefinition = parameterDefinition();
			_localctx._Parameters.Add(_localctx._parameterDefinition);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 91;
				Match(Comma);
				State = 92;
				_localctx._parameterDefinition = parameterDefinition();
				_localctx._Parameters.Add(_localctx._parameterDefinition);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDefinitionContext : ParserRuleContext {
		public IToken MutModifier;
		public IToken Name;
		public TypeReferenceContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MutKeyword() { return GetToken(Ca21Parser.MutKeyword, 0); }
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDefinition; } }
	}

	[RuleVersion(0)]
	public ParameterDefinitionContext parameterDefinition() {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameterDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword) {
				{
				State = 98;
				_localctx.MutModifier = Match(MutKeyword);
				}
			}

			State = 101;
			_localctx.Name = Match(Identifier);
			State = 102;
			_localctx.Type = typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
	 
		public TypeReferenceContext() { }
		public virtual void CopyFrom(TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeywordTypeReferenceContext : TypeReferenceContext {
		public TypeKeywordContext TypeKeyword;
		[System.Diagnostics.DebuggerNonUserCode] public TypeKeywordContext typeKeyword() {
			return GetRuleContext<TypeKeywordContext>(0);
		}
		public KeywordTypeReferenceContext(TypeReferenceContext context) { CopyFrom(context); }
	}
	public partial class SimpleNameTypeReferenceContext : TypeReferenceContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public SimpleNameTypeReferenceContext(TypeReferenceContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeReference);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int32Keyword:
			case Int64Keyword:
			case BoolKeyword:
			case StringKeyword:
				_localctx = new KeywordTypeReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				((KeywordTypeReferenceContext)_localctx).TypeKeyword = typeKeyword();
				}
				break;
			case Identifier:
				_localctx = new SimpleNameTypeReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				((SimpleNameTypeReferenceContext)_localctx).Name = Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeKeywordContext : ParserRuleContext {
		public IToken Keyword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32Keyword() { return GetToken(Ca21Parser.Int32Keyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64Keyword() { return GetToken(Ca21Parser.Int64Keyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyword() { return GetToken(Ca21Parser.StringKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolKeyword() { return GetToken(Ca21Parser.BoolKeyword, 0); }
		public TypeKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeKeyword; } }
	}

	[RuleVersion(0)]
	public TypeKeywordContext typeKeyword() {
		TypeKeywordContext _localctx = new TypeKeywordContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeKeyword);
		try {
			State = 112;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int32Keyword:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				_localctx.Keyword = Match(Int32Keyword);
				}
				break;
			case Int64Keyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				_localctx.Keyword = Match(Int64Keyword);
				}
				break;
			case StringKeyword:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				_localctx.Keyword = Match(StringKeyword);
				}
				break;
			case BoolKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 111;
				_localctx.Keyword = Match(BoolKeyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 22, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(LeftBrace);
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4455376L) != 0)) {
				{
				{
				State = 115;
				_localctx._statement = statement();
				_localctx._Statements.Add(_localctx._statement);
				}
				}
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReturnKeyword() { return GetToken(Ca21Parser.ReturnKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BlockStatementContext : StatementContext {
		public BlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext Condition;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WhileKeyword() { return GetToken(Ca21Parser.WhileKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class LocalDeclarationStatementContext : StatementContext {
		public LocalDeclarationContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public LocalDeclarationContext localDeclaration() {
			return GetRuleContext<LocalDeclarationContext>(0);
		}
		public LocalDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LetKeyword:
				_localctx = new LocalDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 123;
				((LocalDeclarationStatementContext)_localctx).Declaration = localDeclaration();
				}
				break;
			case WhileKeyword:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 124;
				Match(WhileKeyword);
				State = 125;
				((WhileStatementContext)_localctx).Condition = expression(0);
				State = 126;
				((WhileStatementContext)_localctx).Body = block();
				}
				break;
			case ReturnKeyword:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				Match(ReturnKeyword);
				State = 129;
				((ReturnStatementContext)_localctx).Value = expressionOrBlock();
				State = 130;
				Match(Semicolon);
				}
				break;
			case LeftBrace:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 132;
				((BlockStatementContext)_localctx).Block = block();
				}
				break;
			case Int32Keyword:
			case Int64Keyword:
			case BoolKeyword:
			case StringKeyword:
			case TrueKeyword:
			case FalseKeyword:
			case String:
			case Integer:
			case Identifier:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 133;
				((ExpressionStatementContext)_localctx).Expression = expression(0);
				State = 134;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDeclarationContext : ParserRuleContext {
		public IToken MutModifier;
		public IToken Name;
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LetKeyword() { return GetToken(Ca21Parser.LetKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MutKeyword() { return GetToken(Ca21Parser.MutKeyword, 0); }
		public LocalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDeclaration; } }
	}

	[RuleVersion(0)]
	public LocalDeclarationContext localDeclaration() {
		LocalDeclarationContext _localctx = new LocalDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_localDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(LetKeyword);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword) {
				{
				State = 139;
				_localctx.MutModifier = Match(MutKeyword);
				}
			}

			State = 142;
			_localctx.Name = Match(Identifier);
			State = 143;
			Match(Equal);
			State = 144;
			_localctx.Value = expressionOrBlock();
			State = 145;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrBlockContext : ParserRuleContext {
		public ExpressionOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrBlock; } }
	 
		public ExpressionOrBlockContext() { }
		public virtual void CopyFrom(ExpressionOrBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NonBlockExpressionContext : ExpressionOrBlockContext {
		public ExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NonBlockExpressionContext(ExpressionOrBlockContext context) { CopyFrom(context); }
	}
	public partial class BlockExpressionContext : ExpressionOrBlockContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		public ExpressionContext Tail;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExpressionContext(ExpressionOrBlockContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionOrBlockContext expressionOrBlock() {
		ExpressionOrBlockContext _localctx = new ExpressionOrBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionOrBlock);
		int _la;
		try {
			int _alt;
			State = 159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				_localctx = new BlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				Match(LeftBrace);
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 148;
						((BlockExpressionContext)_localctx)._statement = statement();
						((BlockExpressionContext)_localctx)._Statements.Add(((BlockExpressionContext)_localctx)._statement);
						}
						} 
					}
					State = 153;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 236480L) != 0)) {
					{
					State = 154;
					((BlockExpressionContext)_localctx).Tail = expression(0);
					}
				}

				State = 157;
				Match(RightBrace);
				}
				break;
			case Int32Keyword:
			case Int64Keyword:
			case BoolKeyword:
			case StringKeyword:
			case TrueKeyword:
			case FalseKeyword:
			case String:
			case Integer:
			case Identifier:
				_localctx = new NonBlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				((NonBlockExpressionContext)_localctx).Expression = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(Ca21Parser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEqual() { return GetToken(Ca21Parser.LessThanOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(Ca21Parser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEqual() { return GetToken(Ca21Parser.GreaterThanOrEqual, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FactorExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(Ca21Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(Ca21Parser.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percentage() { return GetToken(Ca21Parser.Percentage, 0); }
		public FactorExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class StructureLiteralExpressionContext : ExpressionContext {
		public TypeReferenceContext Structure;
		public FieldInitializerContext _fieldInitializer;
		public IList<FieldInitializerContext> _Fields = new List<FieldInitializerContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerContext[] fieldInitializer() {
			return GetRuleContexts<FieldInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerContext fieldInitializer(int i) {
			return GetRuleContext<FieldInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(Ca21Parser.Comma, 0); }
		public StructureLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class TermExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(Ca21Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(Ca21Parser.Minus, 0); }
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Assignee;
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext Literal;
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NameExpressionContext : ExpressionContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AccessExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(Ca21Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public AccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext Callee;
		public ArgumentListContext ArgumentList;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(Ca21Parser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(Ca21Parser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 162;
				((LiteralExpressionContext)_localctx).Literal = literal();
				}
				break;
			case 2:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163;
				((NameExpressionContext)_localctx).Name = Match(Identifier);
				}
				break;
			case 3:
				{
				_localctx = new StructureLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				((StructureLiteralExpressionContext)_localctx).Structure = typeReference();
				State = 165;
				Match(LeftBrace);
				{
				State = 166;
				((StructureLiteralExpressionContext)_localctx)._fieldInitializer = fieldInitializer();
				((StructureLiteralExpressionContext)_localctx)._Fields.Add(((StructureLiteralExpressionContext)_localctx)._fieldInitializer);
				{
				State = 167;
				Match(Comma);
				State = 168;
				((StructureLiteralExpressionContext)_localctx)._fieldInitializer = fieldInitializer();
				((StructureLiteralExpressionContext)_localctx)._Fields.Add(((StructureLiteralExpressionContext)_localctx)._fieldInitializer);
				}
				}
				State = 170;
				Match(RightBrace);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new FactorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FactorExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 175;
						((FactorExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 234881024L) != 0)) ) {
							((FactorExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 176;
						((FactorExpressionContext)_localctx).Right = expression(5);
						}
						break;
					case 2:
						{
						_localctx = new TermExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TermExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 178;
						((TermExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((TermExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 179;
						((TermExpressionContext)_localctx).Right = expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 181;
						((ComparisonExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16106127360L) != 0)) ) {
							((ComparisonExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 182;
						((ComparisonExpressionContext)_localctx).Right = expression(3);
						}
						break;
					case 4:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Assignee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 184;
						Match(Equal);
						State = 185;
						((AssignmentExpressionContext)_localctx).Value = expression(2);
						}
						break;
					case 5:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CallExpressionContext)_localctx).Callee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 187;
						Match(LeftParenthesis);
						State = 189;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 236480L) != 0)) {
							{
							State = 188;
							((CallExpressionContext)_localctx).ArgumentList = argumentList();
							}
						}

						State = 191;
						Match(RightParenthesis);
						}
						break;
					case 6:
						{
						_localctx = new AccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AccessExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 193;
						Match(Dot);
						State = 194;
						((AccessExpressionContext)_localctx).Right = Match(Identifier);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldInitializerContext : ParserRuleContext {
		public FieldInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializer; } }
	 
		public FieldInitializerContext() { }
		public virtual void CopyFrom(FieldInitializerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NameOnlyFieldInitializerContext : FieldInitializerContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public NameOnlyFieldInitializerContext(FieldInitializerContext context) { CopyFrom(context); }
	}
	public partial class AssignmentFieldInitializerContext : FieldInitializerContext {
		public IToken Name;
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		public AssignmentFieldInitializerContext(FieldInitializerContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public FieldInitializerContext fieldInitializer() {
		FieldInitializerContext _localctx = new FieldInitializerContext(Context, State);
		EnterRule(_localctx, 32, RULE_fieldInitializer);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new AssignmentFieldInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				((AssignmentFieldInitializerContext)_localctx).Name = Match(Identifier);
				State = 201;
				Match(Equal);
				State = 202;
				((AssignmentFieldInitializerContext)_localctx).Value = expressionOrBlock();
				}
				break;
			case 2:
				_localctx = new NameOnlyFieldInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				((NameOnlyFieldInitializerContext)_localctx).Name = Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Arguments = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 34, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_localctx._expression = expression(0);
			_localctx._Arguments.Add(_localctx._expression);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 207;
				Match(Comma);
				State = 208;
				_localctx._expression = expression(0);
				_localctx._Arguments.Add(_localctx._expression);
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrueLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TrueKeyword() { return GetToken(Ca21Parser.TrueKeyword, 0); }
		public TrueLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class StringLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(Ca21Parser.String, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class IntegerLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(Ca21Parser.Integer, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class FalseLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FalseKeyword() { return GetToken(Ca21Parser.FalseKeyword, 0); }
		public FalseLiteralContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 36, RULE_literal);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				((IntegerLiteralContext)_localctx).Value = Match(Integer);
				}
				break;
			case TrueKeyword:
				_localctx = new TrueLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				((TrueLiteralContext)_localctx).Value = Match(TrueKeyword);
				}
				break;
			case FalseKeyword:
				_localctx = new FalseLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				((FalseLiteralContext)_localctx).Value = Match(FalseKeyword);
				}
				break;
			case String:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 217;
				((StringLiteralContext)_localctx).Value = Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		case 2: return Precpred(Context, 2);
		case 3: return Precpred(Context, 1);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,4,0,40,8,0,11,0,12,0,41,1,
		0,1,0,1,1,1,1,3,1,48,8,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,56,8,2,10,2,12,2,
		59,9,2,1,2,1,2,1,3,1,3,1,3,1,4,3,4,67,8,4,1,4,3,4,70,8,4,1,4,1,4,1,4,3,
		4,75,8,4,1,5,1,5,3,5,79,8,5,1,6,1,6,1,6,1,6,3,6,85,8,6,1,6,1,6,3,6,89,
		8,6,1,7,1,7,1,7,5,7,94,8,7,10,7,12,7,97,9,7,1,8,3,8,100,8,8,1,8,1,8,1,
		8,1,9,1,9,3,9,107,8,9,1,10,1,10,1,10,1,10,3,10,113,8,10,1,11,1,11,5,11,
		117,8,11,10,11,12,11,120,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,137,8,12,1,13,1,13,3,13,141,8,
		13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,5,14,150,8,14,10,14,12,14,153,9,
		14,1,14,3,14,156,8,14,1,14,1,14,3,14,160,8,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,3,15,173,8,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,190,8,15,1,15,1,15,
		1,15,1,15,5,15,196,8,15,10,15,12,15,199,9,15,1,16,1,16,1,16,1,16,3,16,
		205,8,16,1,17,1,17,1,17,5,17,210,8,17,10,17,12,17,213,9,17,1,18,1,18,1,
		18,1,18,3,18,219,8,18,1,18,0,1,30,19,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,0,3,1,0,25,27,1,0,28,29,1,0,30,33,239,0,39,1,0,0,0,2,
		47,1,0,0,0,4,49,1,0,0,0,6,62,1,0,0,0,8,66,1,0,0,0,10,76,1,0,0,0,12,80,
		1,0,0,0,14,90,1,0,0,0,16,99,1,0,0,0,18,106,1,0,0,0,20,112,1,0,0,0,22,114,
		1,0,0,0,24,136,1,0,0,0,26,138,1,0,0,0,28,159,1,0,0,0,30,172,1,0,0,0,32,
		204,1,0,0,0,34,206,1,0,0,0,36,218,1,0,0,0,38,40,3,2,1,0,39,38,1,0,0,0,
		40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,43,1,0,0,0,43,44,5,0,0,1,
		44,1,1,0,0,0,45,48,3,8,4,0,46,48,3,4,2,0,47,45,1,0,0,0,47,46,1,0,0,0,48,
		3,1,0,0,0,49,50,5,10,0,0,50,51,5,17,0,0,51,52,5,22,0,0,52,57,3,6,3,0,53,
		54,5,19,0,0,54,56,3,6,3,0,55,53,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,
		58,1,0,0,0,58,60,1,0,0,0,59,57,1,0,0,0,60,61,5,23,0,0,61,5,1,0,0,0,62,
		63,5,17,0,0,63,64,3,18,9,0,64,7,1,0,0,0,65,67,5,2,0,0,66,65,1,0,0,0,66,
		67,1,0,0,0,67,69,1,0,0,0,68,70,3,10,5,0,69,68,1,0,0,0,69,70,1,0,0,0,70,
		71,1,0,0,0,71,74,3,12,6,0,72,75,5,18,0,0,73,75,3,22,11,0,74,72,1,0,0,0,
		74,73,1,0,0,0,75,9,1,0,0,0,76,78,5,1,0,0,77,79,5,15,0,0,78,77,1,0,0,0,
		78,79,1,0,0,0,79,11,1,0,0,0,80,81,5,3,0,0,81,82,5,17,0,0,82,84,5,20,0,
		0,83,85,3,14,7,0,84,83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,88,5,21,
		0,0,87,89,3,18,9,0,88,87,1,0,0,0,88,89,1,0,0,0,89,13,1,0,0,0,90,95,3,16,
		8,0,91,92,5,19,0,0,92,94,3,16,8,0,93,91,1,0,0,0,94,97,1,0,0,0,95,93,1,
		0,0,0,95,96,1,0,0,0,96,15,1,0,0,0,97,95,1,0,0,0,98,100,5,5,0,0,99,98,1,
		0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,5,17,0,0,102,103,3,18,9,0,
		103,17,1,0,0,0,104,107,3,20,10,0,105,107,5,17,0,0,106,104,1,0,0,0,106,
		105,1,0,0,0,107,19,1,0,0,0,108,113,5,6,0,0,109,113,5,7,0,0,110,113,5,9,
		0,0,111,113,5,8,0,0,112,108,1,0,0,0,112,109,1,0,0,0,112,110,1,0,0,0,112,
		111,1,0,0,0,113,21,1,0,0,0,114,118,5,22,0,0,115,117,3,24,12,0,116,115,
		1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,
		0,120,118,1,0,0,0,121,122,5,23,0,0,122,23,1,0,0,0,123,137,3,26,13,0,124,
		125,5,13,0,0,125,126,3,30,15,0,126,127,3,22,11,0,127,137,1,0,0,0,128,129,
		5,14,0,0,129,130,3,28,14,0,130,131,5,18,0,0,131,137,1,0,0,0,132,137,3,
		22,11,0,133,134,3,30,15,0,134,135,5,18,0,0,135,137,1,0,0,0,136,123,1,0,
		0,0,136,124,1,0,0,0,136,128,1,0,0,0,136,132,1,0,0,0,136,133,1,0,0,0,137,
		25,1,0,0,0,138,140,5,4,0,0,139,141,5,5,0,0,140,139,1,0,0,0,140,141,1,0,
		0,0,141,142,1,0,0,0,142,143,5,17,0,0,143,144,5,34,0,0,144,145,3,28,14,
		0,145,146,5,18,0,0,146,27,1,0,0,0,147,151,5,22,0,0,148,150,3,24,12,0,149,
		148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,155,1,
		0,0,0,153,151,1,0,0,0,154,156,3,30,15,0,155,154,1,0,0,0,155,156,1,0,0,
		0,156,157,1,0,0,0,157,160,5,23,0,0,158,160,3,30,15,0,159,147,1,0,0,0,159,
		158,1,0,0,0,160,29,1,0,0,0,161,162,6,15,-1,0,162,173,3,36,18,0,163,173,
		5,17,0,0,164,165,3,18,9,0,165,166,5,22,0,0,166,167,3,32,16,0,167,168,5,
		19,0,0,168,169,3,32,16,0,169,170,1,0,0,0,170,171,5,23,0,0,171,173,1,0,
		0,0,172,161,1,0,0,0,172,163,1,0,0,0,172,164,1,0,0,0,173,197,1,0,0,0,174,
		175,10,4,0,0,175,176,7,0,0,0,176,196,3,30,15,5,177,178,10,3,0,0,178,179,
		7,1,0,0,179,196,3,30,15,4,180,181,10,2,0,0,181,182,7,2,0,0,182,196,3,30,
		15,3,183,184,10,1,0,0,184,185,5,34,0,0,185,196,3,30,15,2,186,187,10,7,
		0,0,187,189,5,20,0,0,188,190,3,34,17,0,189,188,1,0,0,0,189,190,1,0,0,0,
		190,191,1,0,0,0,191,196,5,21,0,0,192,193,10,6,0,0,193,194,5,24,0,0,194,
		196,5,17,0,0,195,174,1,0,0,0,195,177,1,0,0,0,195,180,1,0,0,0,195,183,1,
		0,0,0,195,186,1,0,0,0,195,192,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,
		197,198,1,0,0,0,198,31,1,0,0,0,199,197,1,0,0,0,200,201,5,17,0,0,201,202,
		5,34,0,0,202,205,3,28,14,0,203,205,5,17,0,0,204,200,1,0,0,0,204,203,1,
		0,0,0,205,33,1,0,0,0,206,211,3,30,15,0,207,208,5,19,0,0,208,210,3,30,15,
		0,209,207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,
		35,1,0,0,0,213,211,1,0,0,0,214,219,5,16,0,0,215,219,5,11,0,0,216,219,5,
		12,0,0,217,219,5,15,0,0,218,214,1,0,0,0,218,215,1,0,0,0,218,216,1,0,0,
		0,218,217,1,0,0,0,219,37,1,0,0,0,26,41,47,57,66,69,74,78,84,88,95,99,106,
		112,118,136,140,151,155,159,172,189,195,197,204,211,218
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
