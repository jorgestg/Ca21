//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ca21.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ca21.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class Ca21Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EnumKeyword=1, ExternKeyword=2, ExportKeyword=3, FuncKeyword=4, ElseKeyword=5, 
		LetKeyword=6, MutKeyword=7, IfKeyword=8, Int32Keyword=9, Int64Keyword=10, 
		BoolKeyword=11, StringKeyword=12, StructKeyword=13, TrueKeyword=14, FalseKeyword=15, 
		WhileKeyword=16, ReturnKeyword=17, String=18, Integer=19, Identifier=20, 
		Semicolon=21, Comma=22, LeftParenthesis=23, RightParenthesis=24, LeftBrace=25, 
		RightBrace=26, Dot=27, Bang=28, Star=29, Slash=30, Percentage=31, Plus=32, 
		Minus=33, LessThan=34, LessThanOrEqual=35, GreaterThan=36, GreaterThanOrEqual=37, 
		Equal=38, DoubleEqual=39, BangEqual=40, DoubleAmpersand=41, DoublePipe=42, 
		Whitespace=43;
	public const int
		RULE_compilationUnit = 0, RULE_topLevelDefinition = 1, RULE_enumerationDefinition = 2, 
		RULE_enumerationCaseDefinition = 3, RULE_functionSignature = 4, RULE_parameterList = 5, 
		RULE_parameterDefinition = 6, RULE_structureDefinition = 7, RULE_fieldDefinition = 8, 
		RULE_functionDefinition = 9, RULE_externModifier = 10, RULE_typeReference = 11, 
		RULE_typeKeyword = 12, RULE_block = 13, RULE_statement = 14, RULE_localDeclaration = 15, 
		RULE_expressionOrBlock = 16, RULE_expression = 17, RULE_fieldInitializer = 18, 
		RULE_argumentList = 19, RULE_literal = 20;
	public static readonly string[] ruleNames = {
		"compilationUnit", "topLevelDefinition", "enumerationDefinition", "enumerationCaseDefinition", 
		"functionSignature", "parameterList", "parameterDefinition", "structureDefinition", 
		"fieldDefinition", "functionDefinition", "externModifier", "typeReference", 
		"typeKeyword", "block", "statement", "localDeclaration", "expressionOrBlock", 
		"expression", "fieldInitializer", "argumentList", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'enum'", "'extern'", "'export'", "'func'", "'else'", "'let'", "'mut'", 
		"'if'", "'int32'", "'int64'", "'bool'", "'string'", "'struct'", "'true'", 
		"'false'", "'while'", "'return'", null, null, null, "';'", "','", "'('", 
		"')'", "'{'", "'}'", "'.'", "'!'", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'<'", "'<='", "'>'", "'>='", "'='", "'=='", "'!='", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EnumKeyword", "ExternKeyword", "ExportKeyword", "FuncKeyword", 
		"ElseKeyword", "LetKeyword", "MutKeyword", "IfKeyword", "Int32Keyword", 
		"Int64Keyword", "BoolKeyword", "StringKeyword", "StructKeyword", "TrueKeyword", 
		"FalseKeyword", "WhileKeyword", "ReturnKeyword", "String", "Integer", 
		"Identifier", "Semicolon", "Comma", "LeftParenthesis", "RightParenthesis", 
		"LeftBrace", "RightBrace", "Dot", "Bang", "Star", "Slash", "Percentage", 
		"Plus", "Minus", "LessThan", "LessThanOrEqual", "GreaterThan", "GreaterThanOrEqual", 
		"Equal", "DoubleEqual", "BangEqual", "DoubleAmpersand", "DoublePipe", 
		"Whitespace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Ca21.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Ca21Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Ca21Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Ca21Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public TopLevelDefinitionContext _topLevelDefinition;
		public IList<TopLevelDefinitionContext> _Definitions = new List<TopLevelDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Ca21Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDefinitionContext[] topLevelDefinition() {
			return GetRuleContexts<TopLevelDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelDefinitionContext topLevelDefinition(int i) {
			return GetRuleContext<TopLevelDefinitionContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42;
				_localctx._topLevelDefinition = topLevelDefinition();
				_localctx._Definitions.Add(_localctx._topLevelDefinition);
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8222L) != 0) );
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelDefinitionContext : ParserRuleContext {
		public TopLevelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelDefinition; } }
	 
		public TopLevelDefinitionContext() { }
		public virtual void CopyFrom(TopLevelDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TopLevelFunctionDefinitionContext : TopLevelDefinitionContext {
		public FunctionDefinitionContext Function;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TopLevelFunctionDefinitionContext(TopLevelDefinitionContext context) { CopyFrom(context); }
	}
	public partial class TopLevelStructureDefinitionContext : TopLevelDefinitionContext {
		public StructureDefinitionContext Structure;
		[System.Diagnostics.DebuggerNonUserCode] public StructureDefinitionContext structureDefinition() {
			return GetRuleContext<StructureDefinitionContext>(0);
		}
		public TopLevelStructureDefinitionContext(TopLevelDefinitionContext context) { CopyFrom(context); }
	}
	public partial class TopLevelEnumerationDefinitionContext : TopLevelDefinitionContext {
		public EnumerationDefinitionContext Enumeration;
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationDefinitionContext enumerationDefinition() {
			return GetRuleContext<EnumerationDefinitionContext>(0);
		}
		public TopLevelEnumerationDefinitionContext(TopLevelDefinitionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TopLevelDefinitionContext topLevelDefinition() {
		TopLevelDefinitionContext _localctx = new TopLevelDefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelDefinition);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EnumKeyword:
				_localctx = new TopLevelEnumerationDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				((TopLevelEnumerationDefinitionContext)_localctx).Enumeration = enumerationDefinition();
				}
				break;
			case ExternKeyword:
			case ExportKeyword:
			case FuncKeyword:
				_localctx = new TopLevelFunctionDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 50;
				((TopLevelFunctionDefinitionContext)_localctx).Function = functionDefinition();
				}
				break;
			case StructKeyword:
				_localctx = new TopLevelStructureDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				((TopLevelStructureDefinitionContext)_localctx).Structure = structureDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationDefinitionContext : ParserRuleContext {
		public IToken Name;
		public EnumerationCaseDefinitionContext _enumerationCaseDefinition;
		public IList<EnumerationCaseDefinitionContext> _Cases = new List<EnumerationCaseDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EnumKeyword() { return GetToken(Ca21Parser.EnumKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationCaseDefinitionContext[] enumerationCaseDefinition() {
			return GetRuleContexts<EnumerationCaseDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumerationCaseDefinitionContext enumerationCaseDefinition(int i) {
			return GetRuleContext<EnumerationCaseDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public EnumerationDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationDefinition; } }
	}

	[RuleVersion(0)]
	public EnumerationDefinitionContext enumerationDefinition() {
		EnumerationDefinitionContext _localctx = new EnumerationDefinitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_enumerationDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(EnumKeyword);
			State = 55;
			_localctx.Name = Match(Identifier);
			State = 56;
			Match(LeftBrace);
			{
			State = 57;
			_localctx._enumerationCaseDefinition = enumerationCaseDefinition();
			_localctx._Cases.Add(_localctx._enumerationCaseDefinition);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 58;
				Match(Comma);
				State = 59;
				_localctx._enumerationCaseDefinition = enumerationCaseDefinition();
				_localctx._Cases.Add(_localctx._enumerationCaseDefinition);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 65;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationCaseDefinitionContext : ParserRuleContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public EnumerationCaseDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationCaseDefinition; } }
	}

	[RuleVersion(0)]
	public EnumerationCaseDefinitionContext enumerationCaseDefinition() {
		EnumerationCaseDefinitionContext _localctx = new EnumerationCaseDefinitionContext(Context, State);
		EnterRule(_localctx, 6, RULE_enumerationCaseDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			_localctx.Name = Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IToken Name;
		public ParameterListContext ParameterList;
		public TypeReferenceContext ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FuncKeyword() { return GetToken(Ca21Parser.FuncKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(Ca21Parser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(Ca21Parser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(FuncKeyword);
			State = 70;
			_localctx.Name = Match(Identifier);
			State = 71;
			Match(LeftParenthesis);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword || _la==Identifier) {
				{
				State = 72;
				_localctx.ParameterList = parameterList();
				}
			}

			State = 75;
			Match(RightParenthesis);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1056256L) != 0)) {
				{
				State = 76;
				_localctx.ReturnType = typeReference();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterDefinitionContext _parameterDefinition;
		public IList<ParameterDefinitionContext> _Parameters = new List<ParameterDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDefinitionContext[] parameterDefinition() {
			return GetRuleContexts<ParameterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDefinitionContext parameterDefinition(int i) {
			return GetRuleContext<ParameterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 10, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_localctx._parameterDefinition = parameterDefinition();
			_localctx._Parameters.Add(_localctx._parameterDefinition);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 80;
				Match(Comma);
				State = 81;
				_localctx._parameterDefinition = parameterDefinition();
				_localctx._Parameters.Add(_localctx._parameterDefinition);
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDefinitionContext : ParserRuleContext {
		public IToken MutModifier;
		public IToken Name;
		public TypeReferenceContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MutKeyword() { return GetToken(Ca21Parser.MutKeyword, 0); }
		public ParameterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDefinition; } }
	}

	[RuleVersion(0)]
	public ParameterDefinitionContext parameterDefinition() {
		ParameterDefinitionContext _localctx = new ParameterDefinitionContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword) {
				{
				State = 87;
				_localctx.MutModifier = Match(MutKeyword);
				}
			}

			State = 90;
			_localctx.Name = Match(Identifier);
			State = 91;
			_localctx.Type = typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructureDefinitionContext : ParserRuleContext {
		public IToken Name;
		public FieldDefinitionContext _fieldDefinition;
		public IList<FieldDefinitionContext> _Fields = new List<FieldDefinitionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StructKeyword() { return GetToken(Ca21Parser.StructKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext[] fieldDefinition() {
			return GetRuleContexts<FieldDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition(int i) {
			return GetRuleContext<FieldDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public StructureDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structureDefinition; } }
	}

	[RuleVersion(0)]
	public StructureDefinitionContext structureDefinition() {
		StructureDefinitionContext _localctx = new StructureDefinitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_structureDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(StructKeyword);
			State = 94;
			_localctx.Name = Match(Identifier);
			State = 95;
			Match(LeftBrace);
			{
			State = 96;
			_localctx._fieldDefinition = fieldDefinition();
			_localctx._Fields.Add(_localctx._fieldDefinition);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 97;
				Match(Comma);
				State = 98;
				_localctx._fieldDefinition = fieldDefinition();
				_localctx._Fields.Add(_localctx._fieldDefinition);
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 104;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		public IToken Name;
		public TypeReferenceContext Type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_localctx.Name = Match(Identifier);
			State = 107;
			_localctx.Type = typeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public IToken ExportModifier;
		public ExternModifierContext ExternModifier;
		public FunctionSignatureContext Signature;
		public IToken EndOfDeclaration;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionSignatureContext functionSignature() {
			return GetRuleContext<FunctionSignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExportKeyword() { return GetToken(Ca21Parser.ExportKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternModifierContext externModifier() {
			return GetRuleContext<ExternModifierContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 18, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ExportKeyword) {
				{
				State = 109;
				_localctx.ExportModifier = Match(ExportKeyword);
				}
			}

			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ExternKeyword) {
				{
				State = 112;
				_localctx.ExternModifier = externModifier();
				}
			}

			State = 115;
			_localctx.Signature = functionSignature();
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Semicolon:
				{
				State = 116;
				_localctx.EndOfDeclaration = Match(Semicolon);
				}
				break;
			case LeftBrace:
				{
				State = 117;
				_localctx.Body = block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternModifierContext : ParserRuleContext {
		public IToken ExternName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ExternKeyword() { return GetToken(Ca21Parser.ExternKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(Ca21Parser.String, 0); }
		public ExternModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externModifier; } }
	}

	[RuleVersion(0)]
	public ExternModifierContext externModifier() {
		ExternModifierContext _localctx = new ExternModifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_externModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(ExternKeyword);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==String) {
				{
				State = 121;
				_localctx.ExternName = Match(String);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeReferenceContext : ParserRuleContext {
		public TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeReference; } }
	 
		public TypeReferenceContext() { }
		public virtual void CopyFrom(TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KeywordTypeReferenceContext : TypeReferenceContext {
		public TypeKeywordContext TypeKeyword;
		[System.Diagnostics.DebuggerNonUserCode] public TypeKeywordContext typeKeyword() {
			return GetRuleContext<TypeKeywordContext>(0);
		}
		public KeywordTypeReferenceContext(TypeReferenceContext context) { CopyFrom(context); }
	}
	public partial class SimpleNameTypeReferenceContext : TypeReferenceContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public SimpleNameTypeReferenceContext(TypeReferenceContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public TypeReferenceContext typeReference() {
		TypeReferenceContext _localctx = new TypeReferenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeReference);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int32Keyword:
			case Int64Keyword:
			case BoolKeyword:
			case StringKeyword:
				_localctx = new KeywordTypeReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				((KeywordTypeReferenceContext)_localctx).TypeKeyword = typeKeyword();
				}
				break;
			case Identifier:
				_localctx = new SimpleNameTypeReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 125;
				((SimpleNameTypeReferenceContext)_localctx).Name = Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeKeywordContext : ParserRuleContext {
		public IToken Keyword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32Keyword() { return GetToken(Ca21Parser.Int32Keyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64Keyword() { return GetToken(Ca21Parser.Int64Keyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringKeyword() { return GetToken(Ca21Parser.StringKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoolKeyword() { return GetToken(Ca21Parser.BoolKeyword, 0); }
		public TypeKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeKeyword; } }
	}

	[RuleVersion(0)]
	public TypeKeywordContext typeKeyword() {
		TypeKeywordContext _localctx = new TypeKeywordContext(Context, State);
		EnterRule(_localctx, 24, RULE_typeKeyword);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int32Keyword:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				_localctx.Keyword = Match(Int32Keyword);
				}
				break;
			case Int64Keyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				_localctx.Keyword = Match(Int64Keyword);
				}
				break;
			case StringKeyword:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130;
				_localctx.Keyword = Match(StringKeyword);
				}
				break;
			case BoolKeyword:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131;
				_localctx.Keyword = Match(BoolKeyword);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(LeftBrace);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8894013248L) != 0)) {
				{
				{
				State = 135;
				_localctx._statement = statement();
				_localctx._Statements.Add(_localctx._statement);
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 141;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExpressionContext Condition;
		public BlockContext Body;
		public BlockContext ElseClause;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IfKeyword() { return GetToken(Ca21Parser.IfKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ElseKeyword() { return GetToken(Ca21Parser.ElseKeyword, 0); }
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class ReturnStatementContext : StatementContext {
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ReturnKeyword() { return GetToken(Ca21Parser.ReturnKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		public ReturnStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class BlockStatementContext : StatementContext {
		public BlockContext Block;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class WhileStatementContext : StatementContext {
		public ExpressionContext Condition;
		public BlockContext Body;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WhileKeyword() { return GetToken(Ca21Parser.WhileKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(StatementContext context) { CopyFrom(context); }
	}
	public partial class LocalDeclarationStatementContext : StatementContext {
		public LocalDeclarationContext Declaration;
		[System.Diagnostics.DebuggerNonUserCode] public LocalDeclarationContext localDeclaration() {
			return GetRuleContext<LocalDeclarationContext>(0);
		}
		public LocalDeclarationStatementContext(StatementContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		int _la;
		try {
			State = 163;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LetKeyword:
				_localctx = new LocalDeclarationStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				((LocalDeclarationStatementContext)_localctx).Declaration = localDeclaration();
				}
				break;
			case IfKeyword:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 144;
				Match(IfKeyword);
				State = 145;
				((IfStatementContext)_localctx).Condition = expression(0);
				State = 146;
				((IfStatementContext)_localctx).Body = block();
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ElseKeyword) {
					{
					State = 147;
					Match(ElseKeyword);
					State = 148;
					((IfStatementContext)_localctx).ElseClause = block();
					}
				}

				}
				break;
			case WhileKeyword:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 151;
				Match(WhileKeyword);
				State = 152;
				((WhileStatementContext)_localctx).Condition = expression(0);
				State = 153;
				((WhileStatementContext)_localctx).Body = block();
				}
				break;
			case ReturnKeyword:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155;
				Match(ReturnKeyword);
				State = 156;
				((ReturnStatementContext)_localctx).Value = expressionOrBlock();
				State = 157;
				Match(Semicolon);
				}
				break;
			case LeftBrace:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 159;
				((BlockStatementContext)_localctx).Block = block();
				}
				break;
			case Int32Keyword:
			case Int64Keyword:
			case BoolKeyword:
			case StringKeyword:
			case TrueKeyword:
			case FalseKeyword:
			case String:
			case Integer:
			case Identifier:
			case Bang:
			case Minus:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 160;
				((ExpressionStatementContext)_localctx).Expression = expression(0);
				State = 161;
				Match(Semicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDeclarationContext : ParserRuleContext {
		public IToken MutModifier;
		public IToken Name;
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LetKeyword() { return GetToken(Ca21Parser.LetKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(Ca21Parser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MutKeyword() { return GetToken(Ca21Parser.MutKeyword, 0); }
		public LocalDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDeclaration; } }
	}

	[RuleVersion(0)]
	public LocalDeclarationContext localDeclaration() {
		LocalDeclarationContext _localctx = new LocalDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_localDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(LetKeyword);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MutKeyword) {
				{
				State = 166;
				_localctx.MutModifier = Match(MutKeyword);
				}
			}

			State = 169;
			_localctx.Name = Match(Identifier);
			State = 170;
			Match(Equal);
			State = 171;
			_localctx.Value = expressionOrBlock();
			State = 172;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrBlockContext : ParserRuleContext {
		public ExpressionOrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrBlock; } }
	 
		public ExpressionOrBlockContext() { }
		public virtual void CopyFrom(ExpressionOrBlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NonBlockExpressionContext : ExpressionOrBlockContext {
		public ExpressionContext Expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NonBlockExpressionContext(ExpressionOrBlockContext context) { CopyFrom(context); }
	}
	public partial class BlockExpressionContext : ExpressionOrBlockContext {
		public StatementContext _statement;
		public IList<StatementContext> _Statements = new List<StatementContext>();
		public ExpressionContext Tail;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockExpressionContext(ExpressionOrBlockContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionOrBlockContext expressionOrBlock() {
		ExpressionOrBlockContext _localctx = new ExpressionOrBlockContext(Context, State);
		EnterRule(_localctx, 32, RULE_expressionOrBlock);
		int _la;
		try {
			int _alt;
			State = 186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				_localctx = new BlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				Match(LeftBrace);
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 175;
						((BlockExpressionContext)_localctx)._statement = statement();
						((BlockExpressionContext)_localctx)._Statements.Add(((BlockExpressionContext)_localctx)._statement);
						}
						} 
					}
					State = 180;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8860261888L) != 0)) {
					{
					State = 181;
					((BlockExpressionContext)_localctx).Tail = expression(0);
					}
				}

				State = 184;
				Match(RightBrace);
				}
				break;
			case Int32Keyword:
			case Int64Keyword:
			case BoolKeyword:
			case StringKeyword:
			case TrueKeyword:
			case FalseKeyword:
			case String:
			case Integer:
			case Identifier:
			case Bang:
			case Minus:
				_localctx = new NonBlockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				((NonBlockExpressionContext)_localctx).Expression = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalAndExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleAmpersand() { return GetToken(Ca21Parser.DoubleAmpersand, 0); }
		public LogicalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class TermExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(Ca21Parser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(Ca21Parser.Minus, 0); }
		public TermExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		public LiteralContext Literal;
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class NameExpressionContext : ExpressionContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public NameExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class LogicalOrExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoublePipe() { return GetToken(Ca21Parser.DoublePipe, 0); }
		public LogicalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		public IToken Operator;
		public ExpressionContext Operand;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(Ca21Parser.Bang, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(Ca21Parser.Minus, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AccessExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(Ca21Parser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public AccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(Ca21Parser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEqual() { return GetToken(Ca21Parser.LessThanOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(Ca21Parser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEqual() { return GetToken(Ca21Parser.GreaterThanOrEqual, 0); }
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class FactorExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Star() { return GetToken(Ca21Parser.Star, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(Ca21Parser.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percentage() { return GetToken(Ca21Parser.Percentage, 0); }
		public FactorExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class StructureLiteralExpressionContext : ExpressionContext {
		public TypeReferenceContext Structure;
		public FieldInitializerContext _fieldInitializer;
		public IList<FieldInitializerContext> _Fields = new List<FieldInitializerContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(Ca21Parser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(Ca21Parser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeReferenceContext typeReference() {
			return GetRuleContext<TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerContext[] fieldInitializer() {
			return GetRuleContexts<FieldInitializerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldInitializerContext fieldInitializer(int i) {
			return GetRuleContext<FieldInitializerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public StructureLiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Assignee;
		public ExpressionContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleEqual() { return GetToken(Ca21Parser.DoubleEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BangEqual() { return GetToken(Ca21Parser.BangEqual, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}
	public partial class CallExpressionContext : ExpressionContext {
		public ExpressionContext Callee;
		public ArgumentListContext ArgumentList;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(Ca21Parser.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(Ca21Parser.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 189;
				((LiteralExpressionContext)_localctx).Literal = literal();
				}
				break;
			case 2:
				{
				_localctx = new NameExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 190;
				((NameExpressionContext)_localctx).Name = Match(Identifier);
				}
				break;
			case 3:
				{
				_localctx = new StructureLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191;
				((StructureLiteralExpressionContext)_localctx).Structure = typeReference();
				State = 192;
				Match(LeftBrace);
				{
				State = 193;
				((StructureLiteralExpressionContext)_localctx)._fieldInitializer = fieldInitializer();
				((StructureLiteralExpressionContext)_localctx)._Fields.Add(((StructureLiteralExpressionContext)_localctx)._fieldInitializer);
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 194;
					Match(Comma);
					State = 195;
					((StructureLiteralExpressionContext)_localctx)._fieldInitializer = fieldInitializer();
					((StructureLiteralExpressionContext)_localctx)._Fields.Add(((StructureLiteralExpressionContext)_localctx)._fieldInitializer);
					}
					}
					State = 200;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 201;
				Match(RightBrace);
				}
				break;
			case 4:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 203;
				((UnaryExpressionContext)_localctx).Operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Bang || _la==Minus) ) {
					((UnaryExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 204;
				((UnaryExpressionContext)_localctx).Operand = expression(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 239;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 237;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new FactorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((FactorExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 207;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 208;
						((FactorExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0)) ) {
							((FactorExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 209;
						((FactorExpressionContext)_localctx).Right = expression(8);
						}
						break;
					case 2:
						{
						_localctx = new TermExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TermExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 210;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 211;
						((TermExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((TermExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 212;
						((TermExpressionContext)_localctx).Right = expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisonExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 213;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 214;
						((ComparisonExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 257698037760L) != 0)) ) {
							((ComparisonExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 215;
						((ComparisonExpressionContext)_localctx).Right = expression(6);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 216;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 217;
						((EqualityExpressionContext)_localctx).Operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DoubleEqual || _la==BangEqual) ) {
							((EqualityExpressionContext)_localctx).Operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 218;
						((EqualityExpressionContext)_localctx).Right = expression(5);
						}
						break;
					case 5:
						{
						_localctx = new LogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalAndExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 219;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 220;
						((LogicalAndExpressionContext)_localctx).Operator = Match(DoubleAmpersand);
						State = 221;
						((LogicalAndExpressionContext)_localctx).Right = expression(4);
						}
						break;
					case 6:
						{
						_localctx = new LogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalOrExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 222;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 223;
						((LogicalOrExpressionContext)_localctx).Operator = Match(DoublePipe);
						State = 224;
						((LogicalOrExpressionContext)_localctx).Right = expression(3);
						}
						break;
					case 7:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Assignee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 225;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 226;
						Match(Equal);
						State = 227;
						((AssignmentExpressionContext)_localctx).Value = expression(2);
						}
						break;
					case 8:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((CallExpressionContext)_localctx).Callee = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 228;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 229;
						Match(LeftParenthesis);
						State = 231;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8860261888L) != 0)) {
							{
							State = 230;
							((CallExpressionContext)_localctx).ArgumentList = argumentList();
							}
						}

						State = 233;
						Match(RightParenthesis);
						}
						break;
					case 9:
						{
						_localctx = new AccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AccessExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 235;
						Match(Dot);
						State = 236;
						((AccessExpressionContext)_localctx).Right = Match(Identifier);
						}
						break;
					}
					} 
				}
				State = 241;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FieldInitializerContext : ParserRuleContext {
		public FieldInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldInitializer; } }
	 
		public FieldInitializerContext() { }
		public virtual void CopyFrom(FieldInitializerContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NameOnlyFieldInitializerContext : FieldInitializerContext {
		public IToken Name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		public NameOnlyFieldInitializerContext(FieldInitializerContext context) { CopyFrom(context); }
	}
	public partial class AssignmentFieldInitializerContext : FieldInitializerContext {
		public IToken Name;
		public ExpressionOrBlockContext Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(Ca21Parser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(Ca21Parser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrBlockContext expressionOrBlock() {
			return GetRuleContext<ExpressionOrBlockContext>(0);
		}
		public AssignmentFieldInitializerContext(FieldInitializerContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public FieldInitializerContext fieldInitializer() {
		FieldInitializerContext _localctx = new FieldInitializerContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldInitializer);
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new AssignmentFieldInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				((AssignmentFieldInitializerContext)_localctx).Name = Match(Identifier);
				State = 243;
				Match(Equal);
				State = 244;
				((AssignmentFieldInitializerContext)_localctx).Value = expressionOrBlock();
				}
				break;
			case 2:
				_localctx = new NameOnlyFieldInitializerContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				((NameOnlyFieldInitializerContext)_localctx).Name = Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Arguments = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(Ca21Parser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(Ca21Parser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 38, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_localctx._expression = expression(0);
			_localctx._Arguments.Add(_localctx._expression);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 249;
				Match(Comma);
				State = 250;
				_localctx._expression = expression(0);
				_localctx._Arguments.Add(_localctx._expression);
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrueLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TrueKeyword() { return GetToken(Ca21Parser.TrueKeyword, 0); }
		public TrueLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class StringLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(Ca21Parser.String, 0); }
		public StringLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class IntegerLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(Ca21Parser.Integer, 0); }
		public IntegerLiteralContext(LiteralContext context) { CopyFrom(context); }
	}
	public partial class FalseLiteralContext : LiteralContext {
		public IToken Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FalseKeyword() { return GetToken(Ca21Parser.FalseKeyword, 0); }
		public FalseLiteralContext(LiteralContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 40, RULE_literal);
		try {
			State = 260;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				_localctx = new IntegerLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				((IntegerLiteralContext)_localctx).Value = Match(Integer);
				}
				break;
			case TrueKeyword:
				_localctx = new TrueLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				((TrueLiteralContext)_localctx).Value = Match(TrueKeyword);
				}
				break;
			case FalseKeyword:
				_localctx = new FalseLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 258;
				((FalseLiteralContext)_localctx).Value = Match(FalseKeyword);
				}
				break;
			case String:
				_localctx = new StringLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 259;
				((StringLiteralContext)_localctx).Value = Match(String);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,43,263,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,4,0,44,
		8,0,11,0,12,0,45,1,0,1,0,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,2,1,2,1,2,1,
		2,5,2,61,8,2,10,2,12,2,64,9,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,3,4,74,8,
		4,1,4,1,4,3,4,78,8,4,1,5,1,5,1,5,5,5,83,8,5,10,5,12,5,86,9,5,1,6,3,6,89,
		8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,100,8,7,10,7,12,7,103,9,7,
		1,7,1,7,1,8,1,8,1,8,1,9,3,9,111,8,9,1,9,3,9,114,8,9,1,9,1,9,1,9,3,9,119,
		8,9,1,10,1,10,3,10,123,8,10,1,11,1,11,3,11,127,8,11,1,12,1,12,1,12,1,12,
		3,12,133,8,12,1,13,1,13,5,13,137,8,13,10,13,12,13,140,9,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,3,14,150,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,3,14,164,8,14,1,15,1,15,3,15,168,8,15,1,
		15,1,15,1,15,1,15,1,15,1,16,1,16,5,16,177,8,16,10,16,12,16,180,9,16,1,
		16,3,16,183,8,16,1,16,1,16,3,16,187,8,16,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,5,17,197,8,17,10,17,12,17,200,9,17,1,17,1,17,1,17,1,17,3,17,
		206,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,232,8,17,
		1,17,1,17,1,17,1,17,5,17,238,8,17,10,17,12,17,241,9,17,1,18,1,18,1,18,
		1,18,3,18,247,8,18,1,19,1,19,1,19,5,19,252,8,19,10,19,12,19,255,9,19,1,
		20,1,20,1,20,1,20,3,20,261,8,20,1,20,0,1,34,21,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,0,5,2,0,28,28,33,33,1,0,29,31,1,0,32,
		33,1,0,34,37,1,0,39,40,288,0,43,1,0,0,0,2,52,1,0,0,0,4,54,1,0,0,0,6,67,
		1,0,0,0,8,69,1,0,0,0,10,79,1,0,0,0,12,88,1,0,0,0,14,93,1,0,0,0,16,106,
		1,0,0,0,18,110,1,0,0,0,20,120,1,0,0,0,22,126,1,0,0,0,24,132,1,0,0,0,26,
		134,1,0,0,0,28,163,1,0,0,0,30,165,1,0,0,0,32,186,1,0,0,0,34,205,1,0,0,
		0,36,246,1,0,0,0,38,248,1,0,0,0,40,260,1,0,0,0,42,44,3,2,1,0,43,42,1,0,
		0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,48,5,0,
		0,1,48,1,1,0,0,0,49,53,3,4,2,0,50,53,3,18,9,0,51,53,3,14,7,0,52,49,1,0,
		0,0,52,50,1,0,0,0,52,51,1,0,0,0,53,3,1,0,0,0,54,55,5,1,0,0,55,56,5,20,
		0,0,56,57,5,25,0,0,57,62,3,6,3,0,58,59,5,22,0,0,59,61,3,6,3,0,60,58,1,
		0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,1,0,0,0,64,62,1,
		0,0,0,65,66,5,26,0,0,66,5,1,0,0,0,67,68,5,20,0,0,68,7,1,0,0,0,69,70,5,
		4,0,0,70,71,5,20,0,0,71,73,5,23,0,0,72,74,3,10,5,0,73,72,1,0,0,0,73,74,
		1,0,0,0,74,75,1,0,0,0,75,77,5,24,0,0,76,78,3,22,11,0,77,76,1,0,0,0,77,
		78,1,0,0,0,78,9,1,0,0,0,79,84,3,12,6,0,80,81,5,22,0,0,81,83,3,12,6,0,82,
		80,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,11,1,0,0,0,86,
		84,1,0,0,0,87,89,5,7,0,0,88,87,1,0,0,0,88,89,1,0,0,0,89,90,1,0,0,0,90,
		91,5,20,0,0,91,92,3,22,11,0,92,13,1,0,0,0,93,94,5,13,0,0,94,95,5,20,0,
		0,95,96,5,25,0,0,96,101,3,16,8,0,97,98,5,22,0,0,98,100,3,16,8,0,99,97,
		1,0,0,0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,
		103,101,1,0,0,0,104,105,5,26,0,0,105,15,1,0,0,0,106,107,5,20,0,0,107,108,
		3,22,11,0,108,17,1,0,0,0,109,111,5,3,0,0,110,109,1,0,0,0,110,111,1,0,0,
		0,111,113,1,0,0,0,112,114,3,20,10,0,113,112,1,0,0,0,113,114,1,0,0,0,114,
		115,1,0,0,0,115,118,3,8,4,0,116,119,5,21,0,0,117,119,3,26,13,0,118,116,
		1,0,0,0,118,117,1,0,0,0,119,19,1,0,0,0,120,122,5,2,0,0,121,123,5,18,0,
		0,122,121,1,0,0,0,122,123,1,0,0,0,123,21,1,0,0,0,124,127,3,24,12,0,125,
		127,5,20,0,0,126,124,1,0,0,0,126,125,1,0,0,0,127,23,1,0,0,0,128,133,5,
		9,0,0,129,133,5,10,0,0,130,133,5,12,0,0,131,133,5,11,0,0,132,128,1,0,0,
		0,132,129,1,0,0,0,132,130,1,0,0,0,132,131,1,0,0,0,133,25,1,0,0,0,134,138,
		5,25,0,0,135,137,3,28,14,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,
		0,0,138,139,1,0,0,0,139,141,1,0,0,0,140,138,1,0,0,0,141,142,5,26,0,0,142,
		27,1,0,0,0,143,164,3,30,15,0,144,145,5,8,0,0,145,146,3,34,17,0,146,149,
		3,26,13,0,147,148,5,5,0,0,148,150,3,26,13,0,149,147,1,0,0,0,149,150,1,
		0,0,0,150,164,1,0,0,0,151,152,5,16,0,0,152,153,3,34,17,0,153,154,3,26,
		13,0,154,164,1,0,0,0,155,156,5,17,0,0,156,157,3,32,16,0,157,158,5,21,0,
		0,158,164,1,0,0,0,159,164,3,26,13,0,160,161,3,34,17,0,161,162,5,21,0,0,
		162,164,1,0,0,0,163,143,1,0,0,0,163,144,1,0,0,0,163,151,1,0,0,0,163,155,
		1,0,0,0,163,159,1,0,0,0,163,160,1,0,0,0,164,29,1,0,0,0,165,167,5,6,0,0,
		166,168,5,7,0,0,167,166,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,170,
		5,20,0,0,170,171,5,38,0,0,171,172,3,32,16,0,172,173,5,21,0,0,173,31,1,
		0,0,0,174,178,5,25,0,0,175,177,3,28,14,0,176,175,1,0,0,0,177,180,1,0,0,
		0,178,176,1,0,0,0,178,179,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,181,
		183,3,34,17,0,182,181,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,187,
		5,26,0,0,185,187,3,34,17,0,186,174,1,0,0,0,186,185,1,0,0,0,187,33,1,0,
		0,0,188,189,6,17,-1,0,189,206,3,40,20,0,190,206,5,20,0,0,191,192,3,22,
		11,0,192,193,5,25,0,0,193,198,3,36,18,0,194,195,5,22,0,0,195,197,3,36,
		18,0,196,194,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,
		201,1,0,0,0,200,198,1,0,0,0,201,202,5,26,0,0,202,206,1,0,0,0,203,204,7,
		0,0,0,204,206,3,34,17,8,205,188,1,0,0,0,205,190,1,0,0,0,205,191,1,0,0,
		0,205,203,1,0,0,0,206,239,1,0,0,0,207,208,10,7,0,0,208,209,7,1,0,0,209,
		238,3,34,17,8,210,211,10,6,0,0,211,212,7,2,0,0,212,238,3,34,17,7,213,214,
		10,5,0,0,214,215,7,3,0,0,215,238,3,34,17,6,216,217,10,4,0,0,217,218,7,
		4,0,0,218,238,3,34,17,5,219,220,10,3,0,0,220,221,5,41,0,0,221,238,3,34,
		17,4,222,223,10,2,0,0,223,224,5,42,0,0,224,238,3,34,17,3,225,226,10,1,
		0,0,226,227,5,38,0,0,227,238,3,34,17,2,228,229,10,11,0,0,229,231,5,23,
		0,0,230,232,3,38,19,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,
		233,238,5,24,0,0,234,235,10,10,0,0,235,236,5,27,0,0,236,238,5,20,0,0,237,
		207,1,0,0,0,237,210,1,0,0,0,237,213,1,0,0,0,237,216,1,0,0,0,237,219,1,
		0,0,0,237,222,1,0,0,0,237,225,1,0,0,0,237,228,1,0,0,0,237,234,1,0,0,0,
		238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,35,1,0,0,0,241,239,
		1,0,0,0,242,243,5,20,0,0,243,244,5,38,0,0,244,247,3,32,16,0,245,247,5,
		20,0,0,246,242,1,0,0,0,246,245,1,0,0,0,247,37,1,0,0,0,248,253,3,34,17,
		0,249,250,5,22,0,0,250,252,3,34,17,0,251,249,1,0,0,0,252,255,1,0,0,0,253,
		251,1,0,0,0,253,254,1,0,0,0,254,39,1,0,0,0,255,253,1,0,0,0,256,261,5,19,
		0,0,257,261,5,14,0,0,258,261,5,15,0,0,259,261,5,18,0,0,260,256,1,0,0,0,
		260,257,1,0,0,0,260,258,1,0,0,0,260,259,1,0,0,0,261,41,1,0,0,0,29,45,52,
		62,73,77,84,88,101,110,113,118,122,126,132,138,149,163,167,178,182,186,
		198,205,231,237,239,246,253,260
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ca21.Antlr
